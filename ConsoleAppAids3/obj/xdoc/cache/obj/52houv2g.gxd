id: WizardWrx.ConsoleAppAids3
language: CSharp
name:
  Default: WizardWrx.ConsoleAppAids3
qualifiedName:
  Default: WizardWrx.ConsoleAppAids3
type: Assembly
modifiers: {}
items:
- id: WizardWrx.ConsoleAppAids3
  commentId: N:WizardWrx.ConsoleAppAids3
  language: CSharp
  name:
    CSharp: WizardWrx.ConsoleAppAids3
    VB: WizardWrx.ConsoleAppAids3
  nameWithType:
    CSharp: WizardWrx.ConsoleAppAids3
    VB: WizardWrx.ConsoleAppAids3
  qualifiedName:
    CSharp: WizardWrx.ConsoleAppAids3
    VB: WizardWrx.ConsoleAppAids3
  type: Namespace
  assemblies:
  - WizardWrx.ConsoleAppAids3
  modifiers: {}
  items:
  - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager
    commentId: T:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager
    language: CSharp
    name:
      CSharp: ConsoleAppStateManager
      VB: ConsoleAppStateManager
    nameWithType:
      CSharp: ConsoleAppStateManager
      VB: ConsoleAppStateManager
    qualifiedName:
      CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager
      VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager
    type: Class
    assemblies:
    - WizardWrx.ConsoleAppAids3
    namespace: WizardWrx.ConsoleAppAids3
    source:
      remote:
        path: ConsoleAppAids3/ConsoleAppStateManager.cs
        branch: master
        repo: https://github.com/txwizard/ConsoleAppAids3.git
      id: ConsoleAppStateManager
      path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
      startLine: 180
    summary: "\nConsoleAppStateManager is an WizardWrx.DLLServices2.StateManager\nadapter, which exposes the adapted object through its read only\nBaseStateManager property, and extends it with methods that provide\nservices applicable exclusively to character mode (console mode)\nprograms.\n"
    remarks: "\nInternally, ConsoleAppStateManager uses some StateManager services that\ncould reasonably be expected to be defined locally. In particular, the\nservices for ascertaining the redirection state of the three standard\nconsole handles and the names of the files to which they are redirected\nseem logically out of place.\n\nThey are in that library because the ExceptionLogger class, which \nbelongs where it is because it meets needs that are substantially\nidentical, regardless of the Windows subsystem in which it runs. While I\ncould have made a wrapper that inherits from the ExceptionLogger, that\nseemed pointless for the few lines of code that would have gone into the\nderived class, when this library has unrelated dependencies on\nWizardWrx.Core.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ConsoleAppStateManager : GenericSingletonBase<ConsoleAppStateManager>'
        VB: >-
          Public Class ConsoleAppStateManager

              Inherits GenericSingletonBase(Of ConsoleAppStateManager)
    inheritance:
    - System.Object
    - WizardWrx.GenericSingletonBase{WizardWrx.ConsoleAppAids3.ConsoleAppStateManager}
    inheritedMembers:
    - WizardWrx.GenericSingletonBase{WizardWrx.ConsoleAppAids3.ConsoleAppStateManager}.s_genTheOnlyInstance
    - WizardWrx.GenericSingletonBase{WizardWrx.ConsoleAppAids3.ConsoleAppStateManager}.TheOnlyInstance
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_DEFAULT_SECONDS
      commentId: F:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_DEFAULT_SECONDS
      language: CSharp
      name:
        CSharp: TIMED_WAIT_DEFAULT_SECONDS
        VB: TIMED_WAIT_DEFAULT_SECONDS
      nameWithType:
        CSharp: ConsoleAppStateManager.TIMED_WAIT_DEFAULT_SECONDS
        VB: ConsoleAppStateManager.TIMED_WAIT_DEFAULT_SECONDS
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_DEFAULT_SECONDS
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_DEFAULT_SECONDS
      type: Field
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: TIMED_WAIT_DEFAULT_SECONDS
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 223
      summary: "\nThis constant specifies the default number of seconds to wait when\nNormalExitAction is Timed. Its current value of zero causes a wait\nof up to 30 seconds, which should be about right most of the time.\n"
      example: []
      syntax:
        content:
          CSharp: public const uint TIMED_WAIT_DEFAULT_SECONDS = 0U
          VB: Public Const TIMED_WAIT_DEFAULT_SECONDS As UInteger = 0UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_WAITING_FOR_DEFAULT
      commentId: F:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_WAITING_FOR_DEFAULT
      language: CSharp
      name:
        CSharp: TIMED_WAIT_WAITING_FOR_DEFAULT
        VB: TIMED_WAIT_WAITING_FOR_DEFAULT
      nameWithType:
        CSharp: ConsoleAppStateManager.TIMED_WAIT_WAITING_FOR_DEFAULT
        VB: ConsoleAppStateManager.TIMED_WAIT_WAITING_FOR_DEFAULT
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_WAITING_FOR_DEFAULT
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_WAITING_FOR_DEFAULT
      type: Field
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: TIMED_WAIT_WAITING_FOR_DEFAULT
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 235
      summary: "\nThis constant specifies a default description of the event that\nhappens when the time expires or the wait is interrupted (canceled),\nwhen NormalExitAction is Timed.\n\nCurrently, the default description is &quot;Program ending,&quot; which is\ntaken from a resource string in the WizardWrx.ConsoleAids class that\nimplements this feature.\n"
      example: []
      syntax:
        content:
          CSharp: public const string TIMED_WAIT_WAITING_FOR_DEFAULT = ""
          VB: Public Const TIMED_WAIT_WAITING_FOR_DEFAULT As String = ""
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_INTERRUPT_CRITERION
      commentId: F:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_INTERRUPT_CRITERION
      language: CSharp
      name:
        CSharp: TIMED_WAIT_INTERRUPT_CRITERION
        VB: TIMED_WAIT_INTERRUPT_CRITERION
      nameWithType:
        CSharp: ConsoleAppStateManager.TIMED_WAIT_INTERRUPT_CRITERION
        VB: ConsoleAppStateManager.TIMED_WAIT_INTERRUPT_CRITERION
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_INTERRUPT_CRITERION
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_INTERRUPT_CRITERION
      type: Field
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: TIMED_WAIT_INTERRUPT_CRITERION
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 244
      summary: "\nThis constant specifies the default method by which the timed wait\ncan be interrupted (canceled) when NormalExitAction is Timed.\n\nCurrently, the default method of interrupting the timed wait is by\npressing the ENTER (Return) key once (CarriageReturn).\n"
      example: []
      syntax:
        content:
          CSharp: public const DisplayAids.InterruptCriterion TIMED_WAIT_INTERRUPT_CRITERION = DisplayAids.InterruptCriterion.CarriageReturn
          VB: Public Const TIMED_WAIT_INTERRUPT_CRITERION As DisplayAids.InterruptCriterion = DisplayAids.InterruptCriterion.CarriageReturn
        return:
          type: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_TEXT_COLOR_DEFAULT
      commentId: F:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_TEXT_COLOR_DEFAULT
      language: CSharp
      name:
        CSharp: TIMED_WAIT_TEXT_COLOR_DEFAULT
        VB: TIMED_WAIT_TEXT_COLOR_DEFAULT
      nameWithType:
        CSharp: ConsoleAppStateManager.TIMED_WAIT_TEXT_COLOR_DEFAULT
        VB: ConsoleAppStateManager.TIMED_WAIT_TEXT_COLOR_DEFAULT
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_TEXT_COLOR_DEFAULT
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_TEXT_COLOR_DEFAULT
      type: Field
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: TIMED_WAIT_TEXT_COLOR_DEFAULT
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 253
      summary: "\nUse this member of the ConsoleColor enumeration, along with the\nTIMED_WAIT_BACKGROUND_COLOR_DEFAULT, to instruct an ExceptionLogger\nobject to render text displayed in toe standard output window of a\nconsole mode application in its default screen colors.\n"
      example: []
      syntax:
        content:
          CSharp: public const ConsoleColor TIMED_WAIT_TEXT_COLOR_DEFAULT = ConsoleColor.Black
          VB: Public Const TIMED_WAIT_TEXT_COLOR_DEFAULT As ConsoleColor = ConsoleColor.Black
        return:
          type: System.ConsoleColor
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_BACKGROUND_COLOR_DEFAULT
      commentId: F:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_BACKGROUND_COLOR_DEFAULT
      language: CSharp
      name:
        CSharp: TIMED_WAIT_BACKGROUND_COLOR_DEFAULT
        VB: TIMED_WAIT_BACKGROUND_COLOR_DEFAULT
      nameWithType:
        CSharp: ConsoleAppStateManager.TIMED_WAIT_BACKGROUND_COLOR_DEFAULT
        VB: ConsoleAppStateManager.TIMED_WAIT_BACKGROUND_COLOR_DEFAULT
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_BACKGROUND_COLOR_DEFAULT
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.TIMED_WAIT_BACKGROUND_COLOR_DEFAULT
      type: Field
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: TIMED_WAIT_BACKGROUND_COLOR_DEFAULT
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 262
      summary: "\nUse this member of the ConsoleColor enumeration, along with the\nTIMED_WAIT_TEXT_COLOR_DEFAULT, to instruct an ExceptionLogger object\nto render text displayed in toe standard output window of a console\nmode application in its default screen colors.\n"
      example: []
      syntax:
        content:
          CSharp: public const ConsoleColor TIMED_WAIT_BACKGROUND_COLOR_DEFAULT = ConsoleColor.Black
          VB: Public Const TIMED_WAIT_BACKGROUND_COLOR_DEFAULT As ConsoleColor = ConsoleColor.Black
        return:
          type: System.ConsoleColor
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.BaseStateManager
      commentId: P:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.BaseStateManager
      language: CSharp
      name:
        CSharp: BaseStateManager
        VB: BaseStateManager
      nameWithType:
        CSharp: ConsoleAppStateManager.BaseStateManager
        VB: ConsoleAppStateManager.BaseStateManager
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.BaseStateManager
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.BaseStateManager
      type: Property
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: BaseStateManager
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 270
      summary: "\nExpose the real state manager behind this adapter.\n"
      example: []
      syntax:
        content:
          CSharp: public StateManager BaseStateManager { get; }
          VB: Public ReadOnly Property BaseStateManager As StateManager
        parameters: []
        return:
          type: WizardWrx.DLLConfigurationManager.StateManager
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.BaseStateManager*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetTheSingleInstance
      commentId: M:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetTheSingleInstance
      language: CSharp
      name:
        CSharp: GetTheSingleInstance()
        VB: GetTheSingleInstance()
      nameWithType:
        CSharp: ConsoleAppStateManager.GetTheSingleInstance()
        VB: ConsoleAppStateManager.GetTheSingleInstance()
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetTheSingleInstance()
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetTheSingleInstance()
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: GetTheSingleInstance
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 310
      summary: "\nGet a reference to the ConsoleAppStateManager singleton, which\norganizes a host of useful application state information under one\nobject.\n"
      remarks: "\nThis method must override and hide the like named method on the base\nclass, because it has extra work to do.\n"
      example: []
      syntax:
        content:
          CSharp: public static ConsoleAppStateManager GetTheSingleInstance()
          VB: Public Shared Function GetTheSingleInstance As ConsoleAppStateManager
        return:
          type: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager
          description: "\nThe return value is the initialized singleton.\n"
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetTheSingleInstance*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.LoadBasicErrorMessages(System.String[])
      commentId: M:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.LoadBasicErrorMessages(System.String[])
      language: CSharp
      name:
        CSharp: LoadBasicErrorMessages(String[])
        VB: LoadBasicErrorMessages(String())
      nameWithType:
        CSharp: ConsoleAppStateManager.LoadBasicErrorMessages(String[])
        VB: ConsoleAppStateManager.LoadBasicErrorMessages(String())
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.LoadBasicErrorMessages(System.String[])
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.LoadBasicErrorMessages(System.String())
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: LoadBasicErrorMessages
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 337
      summary: "\nLoad a set of invariant message strings for use with the program end\nmessage generators.\n"
      example: []
      syntax:
        content:
          CSharp: public int LoadBasicErrorMessages(string[] pastrAdditionalMessages = null)
          VB: Public Function LoadBasicErrorMessages(pastrAdditionalMessages As String() = Nothing) As Integer
        parameters:
        - id: pastrAdditionalMessages
          type: System.String[]
          description: "\nWhen the program has only the basic status messages for clean \ncompletion and runtime exceptions, this argument may be either NULL\nor a reference to an empty array, both of which get the same\ntreatment.\n"
        return:
          type: System.Int32
          description: "\nThe return value is total count of exception messages, which is\nalways at least two.\n"
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.LoadBasicErrorMessages*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayBOJMessage
      commentId: M:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayBOJMessage
      language: CSharp
      name:
        CSharp: DisplayBOJMessage()
        VB: DisplayBOJMessage()
      nameWithType:
        CSharp: ConsoleAppStateManager.DisplayBOJMessage()
        VB: ConsoleAppStateManager.DisplayBOJMessage()
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayBOJMessage()
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayBOJMessage()
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: DisplayBOJMessage
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 387
      summary: "\nWhen called for the first time, this method displays a BOJ message\non the console. Subsequent calls return immediately, without taking\nany action.\n"
      remarks: "\nThis method is a wafer-thin wrapper around GetBOJMessage, and it\nuses a thread-safe method to write its output on the console.\n"
      example: []
      syntax:
        content:
          CSharp: public void DisplayBOJMessage()
          VB: Public Sub DisplayBOJMessage
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayBOJMessage*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayEOJMessage
      commentId: M:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayEOJMessage
      language: CSharp
      name:
        CSharp: DisplayEOJMessage()
        VB: DisplayEOJMessage()
      nameWithType:
        CSharp: ConsoleAppStateManager.DisplayEOJMessage()
        VB: ConsoleAppStateManager.DisplayEOJMessage()
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayEOJMessage()
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayEOJMessage()
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: DisplayEOJMessage
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 402
      summary: "\nThis method takes GetEOJMessage a step further by passing its return\nvalue to a thread-safe console writer.\n"
      remarks: "\nAccess to this method is synchronized by an internally managed\nobject lock.\n"
      example: []
      syntax:
        content:
          CSharp: public void DisplayEOJMessage()
          VB: Public Sub DisplayEOJMessage
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayEOJMessage*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.ErrorExit(System.UInt32)
      commentId: M:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.ErrorExit(System.UInt32)
      language: CSharp
      name:
        CSharp: ErrorExit(UInt32)
        VB: ErrorExit(UInt32)
      nameWithType:
        CSharp: ConsoleAppStateManager.ErrorExit(UInt32)
        VB: ConsoleAppStateManager.ErrorExit(UInt32)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.ErrorExit(System.UInt32)
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.ErrorExit(System.UInt32)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: ErrorExit
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 431
      summary: "\nDisplay an error message, read from a table of static strings, and\nexit, returning the exit code. See Remarks.\n"
      remarks: "\nYou must supply the messages as an array of strings, by calling\ninstance method LoadErrorMessageTable.\n\nAfter the message is displayed, static method WaitForCarbonUnit\nis called with a null string reference, causing it to display its\ndefault prompt, and wait until an operator presses the RETURN key.\n\nWhen WaitForCarbonUnit returns, the DisplayEOJMessage method on the\nsingleton instance is called to display the end of job message,\nalong with the ending time and elapsed time, and control is returned\nto the OS, sending along the exit code.\n"
      example: []
      syntax:
        content:
          CSharp: public void ErrorExit(uint puintStatusCode)
          VB: Public Sub ErrorExit(puintStatusCode As UInteger)
        parameters:
        - id: puintStatusCode
          type: System.UInt32
          description: "\nThis unsigned integer specifies the subscript of the message, and it\nbecomes the program&apos;s exit code. See Remarks.\n"
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.ErrorExit*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetBOJMessage
      commentId: M:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetBOJMessage
      language: CSharp
      name:
        CSharp: GetBOJMessage()
        VB: GetBOJMessage()
      nameWithType:
        CSharp: ConsoleAppStateManager.GetBOJMessage()
        VB: ConsoleAppStateManager.GetBOJMessage()
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetBOJMessage()
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetBOJMessage()
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: GetBOJMessage
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 468
      summary: "\nWhen called for the first time, this method returns a BOJ message,\nready for display on the console. Subsequent calls return an empty\nstring.\n"
      remarks: "\nAccess to this method is synchronized by an internally managed\nobject lock.\n"
      example: []
      syntax:
        content:
          CSharp: public string GetBOJMessage()
          VB: Public Function GetBOJMessage As String
        return:
          type: System.String
          description: "\nThe first call returns a message for display on the console. All\nsubsequent calls return an empty string, indicating that another\nthread already requested a message, and has, presumably, displayed\nit.\n"
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetBOJMessage*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetEOJMessage
      commentId: M:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetEOJMessage
      language: CSharp
      name:
        CSharp: GetEOJMessage()
        VB: GetEOJMessage()
      nameWithType:
        CSharp: ConsoleAppStateManager.GetEOJMessage()
        VB: ConsoleAppStateManager.GetEOJMessage()
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetEOJMessage()
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetEOJMessage()
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: GetEOJMessage
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 520
      summary: "\nThis method returns a new EOJ message each time it is called.\n"
      remarks: "\nAccess to this method is synchronized by an internally managed\nobject lock.\n"
      example: []
      syntax:
        content:
          CSharp: public string GetEOJMessage()
          VB: Public Function GetEOJMessage As String
        return:
          type: System.String
          description: "\nThe returned string is ready to print on the console, by calling the\nConsole.WriteLine method.\n"
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetEOJMessage*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit
      commentId: M:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit
      language: CSharp
      name:
        CSharp: NormalExit()
        VB: NormalExit()
      nameWithType:
        CSharp: ConsoleAppStateManager.NormalExit()
        VB: ConsoleAppStateManager.NormalExit()
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit()
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit()
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: NormalExit
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 587
      summary: "\nExit the program normally, returning the status code stored in this\ninstance, and optionally call WaitForCarbonUnit to suspend execution\nuntil the operator has a chance to read the output or capture it\ninto the clipboard. If WaitForCarbonUnit is called, its default\nmessage is used.\n"
      remarks: "\nThis should have been the way the original version worked. Since it\nis the simplest, I forced the original implementation to surrender\nits hold on the number one slot.\n\nThis method calls overload 4, passing in a null reference for the\ncarbon unit prompt and an immediate exit instruction.\n"
      example: []
      syntax:
        content:
          CSharp: public void NormalExit()
          VB: Public Sub NormalExit
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32,System.String)
      commentId: M:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32,System.String)
      language: CSharp
      name:
        CSharp: NormalExit(UInt32, String)
        VB: NormalExit(UInt32, String)
      nameWithType:
        CSharp: ConsoleAppStateManager.NormalExit(UInt32, String)
        VB: ConsoleAppStateManager.NormalExit(UInt32, String)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32, System.String)
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32, System.String)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: NormalExit
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 621
      summary: "\nExit the program normally, optionally returning a nonzero status\ncode. If running in debug mode, use WaitForCarbonUnit to block until\nthe tester has a chance to read the output or capture it into the\nclipboard.\n"
      remarks: "\nThis is the original implementation, since pre-empted by the simpler\nmethod call that takes no arguments.\n\nWhen I implemented the #if DEBUG conditional compilation block, I\ndidn&apos;t take into consideration that the only time that #if DEBUG is\ntrue is when the debug version of this library is built. I decided\nto leave it in, as a reminder to myself of how it can be effectively\nused with some of the new overloads.\n"
      example: []
      syntax:
        content:
          CSharp: public void NormalExit(uint puintStatusCode, string pstrOperatorPrompt)
          VB: Public Sub NormalExit(puintStatusCode As UInteger, pstrOperatorPrompt As String)
        parameters:
        - id: puintStatusCode
          type: System.UInt32
          description: "\nThis unsigned integer specifies the program&apos;s exit code.\n"
        - id: pstrOperatorPrompt
          type: System.String
          description: "\nThis string specifies an alternative message for method\nWaitForCarbonUnit to display. If this is an empty string or null\nreference, a default message, &quot;Please press the ENTER (Return) key\nto exit the program.&quot; is shown.\n"
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32)
      commentId: M:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32)
      language: CSharp
      name:
        CSharp: NormalExit(UInt32)
        VB: NormalExit(UInt32)
      nameWithType:
        CSharp: ConsoleAppStateManager.NormalExit(UInt32)
        VB: ConsoleAppStateManager.NormalExit(UInt32)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32)
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: NormalExit
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 646
      summary: "\nExit the program normally, optionally returning a nonzero status\ncode. If running in debug mode, use WaitForCarbonUnit to block until\nthe tester has a chance to read the output or capture it into the\nclipboard. Regardless, if WaitForCarbonUnit is called, its default\nmessage is displayed.\n"
      remarks: "\nThis method calls overload 4, passing in a null reference for the\ncarbon unit prompt and an immediate exit instruction.\n"
      example: []
      syntax:
        content:
          CSharp: public void NormalExit(uint puintStatusCode)
          VB: Public Sub NormalExit(puintStatusCode As UInteger)
        parameters:
        - id: puintStatusCode
          type: System.UInt32
          description: "\nThis unsigned integer specifies the program&apos;s exit code.\n"
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32,System.String,WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction)
      commentId: M:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32,System.String,WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction)
      language: CSharp
      name:
        CSharp: NormalExit(UInt32, String, ConsoleAppStateManager.NormalExitAction)
        VB: NormalExit(UInt32, String, ConsoleAppStateManager.NormalExitAction)
      nameWithType:
        CSharp: ConsoleAppStateManager.NormalExit(UInt32, String, ConsoleAppStateManager.NormalExitAction)
        VB: ConsoleAppStateManager.NormalExit(UInt32, String, ConsoleAppStateManager.NormalExitAction)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32, System.String, WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction)
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32, System.String, WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: NormalExit
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 680
      summary: "\nExit the program normally, optionally returning a nonzero status\ncode, and optionally calling WaitForCarbonUnit to suspend execution\nuntil the operator has a chance to read the output or capture it\ninto the clipboard.\n"
      remarks: "\nThis method differs sufficiently from overload 2 that it stands on\nits own. Theoretically, every other overload could call this one.\n"
      example: []
      syntax:
        content:
          CSharp: public void NormalExit(uint puintStatusCode, string pstrOperatorPrompt, ConsoleAppStateManager.NormalExitAction penmNormalExitAction)
          VB: Public Sub NormalExit(puintStatusCode As UInteger, pstrOperatorPrompt As String, penmNormalExitAction As ConsoleAppStateManager.NormalExitAction)
        parameters:
        - id: puintStatusCode
          type: System.UInt32
          description: "\nThis unsigned integer specifies the program&apos;s exit code.\n"
        - id: pstrOperatorPrompt
          type: System.String
          description: "\nThis string specifies an alternative message for method\nWaitForCarbonUnit to display. If this is an empty string or null\nreference, a default message, &quot;Please press the ENTER (Return) key\nto exit the program.&quot; is shown.\n"
        - id: penmNormalExitAction
          type: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
          description: "\nThis member of the NormalExitAction enumeration controls whether to\nuse WaitForCarbonUnit to suspend execution until an operator has a\nchance to read the output. See the NormalExitAction enumeration for\ndetails.\n"
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.String,WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction)
      commentId: M:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.String,WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction)
      language: CSharp
      name:
        CSharp: NormalExit(String, ConsoleAppStateManager.NormalExitAction)
        VB: NormalExit(String, ConsoleAppStateManager.NormalExitAction)
      nameWithType:
        CSharp: ConsoleAppStateManager.NormalExit(String, ConsoleAppStateManager.NormalExitAction)
        VB: ConsoleAppStateManager.NormalExit(String, ConsoleAppStateManager.NormalExitAction)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.String, WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction)
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.String, WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: NormalExit
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 721
      summary: "\nExit the program normally, optionally returning a nonzero status\ncode, and optionally calling WaitForCarbonUnit to suspend execution\nuntil the operator has a chance to read the output or capture it\ninto the clipboard.\n"
      remarks: "\nThis method calls the fourth overload, the most coprehensive\nimplementation, passing in the return code stored in the instance,\nwhich I explicitly cast to the unsigned integer type of its first\nargument.\n"
      example: []
      syntax:
        content:
          CSharp: public void NormalExit(string pstrOperatorPrompt, ConsoleAppStateManager.NormalExitAction penmNormalExitAction)
          VB: Public Sub NormalExit(pstrOperatorPrompt As String, penmNormalExitAction As ConsoleAppStateManager.NormalExitAction)
        parameters:
        - id: pstrOperatorPrompt
          type: System.String
          description: "\nThis string specifies an alternative message for method\nWaitForCarbonUnit to display. If this is an empty string or null\nreference, a default message, &quot;Please press the ENTER (Return) key\nto exit the program.&quot; is shown.\n"
        - id: penmNormalExitAction
          type: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
          description: "\nThis member of the NormalExitAction enumeration controls whether to\nuse WaitForCarbonUnit to suspend execution until an operator has a\nchance to read the output. See the NormalExitAction enumeration for\ndetails.\n"
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32,WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction)
      commentId: M:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32,WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction)
      language: CSharp
      name:
        CSharp: NormalExit(UInt32, ConsoleAppStateManager.NormalExitAction)
        VB: NormalExit(UInt32, ConsoleAppStateManager.NormalExitAction)
      nameWithType:
        CSharp: ConsoleAppStateManager.NormalExit(UInt32, ConsoleAppStateManager.NormalExitAction)
        VB: ConsoleAppStateManager.NormalExit(UInt32, ConsoleAppStateManager.NormalExitAction)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32, WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction)
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32, WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: NormalExit
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 752
      summary: "\nExit the program normally, optionally returning a nonzero status\ncode, and optionally calling WaitForCarbonUnit to suspend execution\nuntil the operator has a chance to read the output or capture it\ninto the clipboard. If WaitForCarbonUnit is called, its default\nmessage is used.\n"
      remarks: "\nThis method calls the fourth overload, the most coprehensive\nimplementation, passing in a null reference for the carbon unit\nprompt message, forcing it to use its default message.\n"
      example: []
      syntax:
        content:
          CSharp: public void NormalExit(uint puintStatusCode, ConsoleAppStateManager.NormalExitAction penmNormalExitAction)
          VB: Public Sub NormalExit(puintStatusCode As UInteger, penmNormalExitAction As ConsoleAppStateManager.NormalExitAction)
        parameters:
        - id: puintStatusCode
          type: System.UInt32
          description: "\nThis unsigned integer specifies the program&apos;s exit code.\n"
        - id: penmNormalExitAction
          type: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
          description: "\nThis member of the NormalExitAction enumeration controls whether to\nuse WaitForCarbonUnit to suspend execution until an operator has a\nchance to read the output. See the NormalExitAction enumeration for\ndetails.\n"
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction)
      commentId: M:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction)
      language: CSharp
      name:
        CSharp: NormalExit(ConsoleAppStateManager.NormalExitAction)
        VB: NormalExit(ConsoleAppStateManager.NormalExitAction)
      nameWithType:
        CSharp: ConsoleAppStateManager.NormalExit(ConsoleAppStateManager.NormalExitAction)
        VB: ConsoleAppStateManager.NormalExit(ConsoleAppStateManager.NormalExitAction)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction)
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: NormalExit
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 783
      summary: "\nExit the program normally, returning the status code stored in this\ninstance, and optionally call WaitForCarbonUnit to suspend execution\nuntil the operator has a chance to read the output or capture it\ninto the clipboard. If WaitForCarbonUnit is called, its default\nmessage is used.\n"
      remarks: "\nThis method calls the fourth overload, the most coprehensive\nimplementation, passing in the return code stored in the instance,\nwhich I explicitly cast to the unsigned integer type of its first\nargument, and a null reference for the carbon unit prompt message,\nforcing it to use its default message.\n"
      example: []
      syntax:
        content:
          CSharp: public void NormalExit(ConsoleAppStateManager.NormalExitAction penmNormalExitAction)
          VB: Public Sub NormalExit(penmNormalExitAction As ConsoleAppStateManager.NormalExitAction)
        parameters:
        - id: penmNormalExitAction
          type: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
          description: "\nThis member of the NormalExitAction enumeration controls whether to\nuse WaitForCarbonUnit to suspend execution until an operator has a\nchance to read the output. See the NormalExitAction enumeration for\ndetails.\n"
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction,System.Boolean)
      commentId: M:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction,System.Boolean)
      language: CSharp
      name:
        CSharp: NormalExit(ConsoleAppStateManager.NormalExitAction, Boolean)
        VB: NormalExit(ConsoleAppStateManager.NormalExitAction, Boolean)
      nameWithType:
        CSharp: ConsoleAppStateManager.NormalExit(ConsoleAppStateManager.NormalExitAction, Boolean)
        VB: ConsoleAppStateManager.NormalExit(ConsoleAppStateManager.NormalExitAction, Boolean)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction, System.Boolean)
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction, System.Boolean)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: NormalExit
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 811
      summary: "\nExit the program normally, returning the status code stored in this\ninstance, and optionally call WaitForCarbonUnit to suspend execution\nuntil the operator has a chance to read the output or capture it\ninto the clipboard. If WaitForCarbonUnit is called, its default\nmessage is used.\n"
      example: []
      syntax:
        content:
          CSharp: public void NormalExit(ConsoleAppStateManager.NormalExitAction penmNormalExitAction, bool pfIgnoreOutOfBoundsStatusCode)
          VB: Public Sub NormalExit(penmNormalExitAction As ConsoleAppStateManager.NormalExitAction, pfIgnoreOutOfBoundsStatusCode As Boolean)
        parameters:
        - id: penmNormalExitAction
          type: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
          description: "\nThis member of the NormalExitAction enumeration controls whether to\nuse WaitForCarbonUnit to suspend execution until an operator has a\nchance to read the output. See the NormalExitAction enumeration for\ndetails.\n"
        - id: pfIgnoreOutOfBoundsStatusCode
          type: System.Boolean
          description: "\nIf True, when the status code is greater than the highest numbered\nmessage in the table, ignore the out-of-bounds condition, but pass\nthe status code to the operating system so that the calling process\nor shell script can use it.\n"
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32,System.String,WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction,System.UInt32,System.String,System.ConsoleColor,System.ConsoleColor,WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion,System.Boolean)
      commentId: M:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32,System.String,WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction,System.UInt32,System.String,System.ConsoleColor,System.ConsoleColor,WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion,System.Boolean)
      language: CSharp
      name:
        CSharp: NormalExit(UInt32, String, ConsoleAppStateManager.NormalExitAction, UInt32, String, ConsoleColor, ConsoleColor, DisplayAids.InterruptCriterion, Boolean)
        VB: NormalExit(UInt32, String, ConsoleAppStateManager.NormalExitAction, UInt32, String, ConsoleColor, ConsoleColor, DisplayAids.InterruptCriterion, Boolean)
      nameWithType:
        CSharp: ConsoleAppStateManager.NormalExit(UInt32, String, ConsoleAppStateManager.NormalExitAction, UInt32, String, ConsoleColor, ConsoleColor, DisplayAids.InterruptCriterion, Boolean)
        VB: ConsoleAppStateManager.NormalExit(UInt32, String, ConsoleAppStateManager.NormalExitAction, UInt32, String, ConsoleColor, ConsoleColor, DisplayAids.InterruptCriterion, Boolean)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32, System.String, WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction, System.UInt32, System.String, System.ConsoleColor, System.ConsoleColor, WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion, System.Boolean)
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit(System.UInt32, System.String, WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction, System.UInt32, System.String, System.ConsoleColor, System.ConsoleColor, WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion, System.Boolean)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: NormalExit
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 892
      summary: "\nExit the program normally, optionally returning a nonzero status\ncode, and optionally calling WaitForCarbonUnit to suspend execution\nuntil the operator has a chance to read the output or capture it\ninto the clipboard.\n"
      remarks: "\nThis method differs sufficiently from overload 2 that it stands on\nits own. Theoretically, every other overload could call this one.\n"
      example: []
      syntax:
        content:
          CSharp: public void NormalExit(uint puintStatusCode, string pstrOperatorPrompt, ConsoleAppStateManager.NormalExitAction penmNormalExitAction, uint puintSecondsToWait, string pstrCountdownWaitingFor, ConsoleColor pclrTextColor, ConsoleColor pclrTextBackgroundColor, DisplayAids.InterruptCriterion penmInterruptCriterion, bool pfIgnoreOutOfBoundsStatusCode = false)
          VB: Public Sub NormalExit(puintStatusCode As UInteger, pstrOperatorPrompt As String, penmNormalExitAction As ConsoleAppStateManager.NormalExitAction, puintSecondsToWait As UInteger, pstrCountdownWaitingFor As String, pclrTextColor As ConsoleColor, pclrTextBackgroundColor As ConsoleColor, penmInterruptCriterion As DisplayAids.InterruptCriterion, pfIgnoreOutOfBoundsStatusCode As Boolean = False)
        parameters:
        - id: puintStatusCode
          type: System.UInt32
          description: "\nThis unsigned integer specifies the program&apos;s exit code.\n"
        - id: pstrOperatorPrompt
          type: System.String
          description: "\nThis string specifies an alternative message for method\nWaitForCarbonUnit to display. If this is an empty string or null\nreference, a default message, &quot;Please press the ENTER (Return) key\nto exit the program.&quot; is shown.\n"
        - id: penmNormalExitAction
          type: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
          description: "\nThis member of the NormalExitAction enumeration controls whether to\nuse WaitForCarbonUnit to suspend execution until an operator has a\nchance to read the output. See the NormalExitAction enumeration for\ndetails.\n"
        - id: puintSecondsToWait
          type: System.UInt32
          description: "\nSpecify the number of seconds to wait, which must be a whole number\ngreater than or equal to zero. Setting this value to zero causes the\nmethod to wait for 30 seconds.\n"
        - id: pstrCountdownWaitingFor
          type: System.String
          description: "\nSpecify the text to display along with the remaining time. If this\nargument is null (Nothing in Visual Basic) or the empy string, the\nmethod uses a default message.\n\nCurrently, the default description is &quot;Program ending,&quot; which is\ntaken from a resource string in the WizardWrx.ConsoleAids class that\nimplements this feature.\n"
        - id: pclrTextColor
          type: System.ConsoleColor
          description: "\nSpecify a member of the ConsoleColor enumeration to control the text\ncolor used to display the countdown message.\n\nTo use the default (current) screen colors, specify the same\nConsoleColor value for pclrTextColor and pclrTextBackgroundColor.\n"
        - id: pclrTextBackgroundColor
          type: System.ConsoleColor
          description: "\nSpecify a member of the ConsoleColor enumeration to control the\nbackground color used to display the countdown message.\n\nTo use the default (current) screen colors, specify the same\nConsoleColor value for pclrTextColor and pclrTextBackgroundColor.\n"
        - id: penmInterruptCriterion
          type: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion
          description: "\nSpecify a member of the DisplayAids.InterruptCriterion enumeration\nto indicate whether you want the timed wait to be interruptible, and\nunder what conditions.\n"
        - id: pfIgnoreOutOfBoundsStatusCode
          type: System.Boolean
          description: "\nIf True, when the status code is greater than the highest numbered\nmessage in the table, ignore the out-of-bounds condition, but pass\nthe status code to the operating system so that the calling process\nor shell script can use it.\n"
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.SetCWDRelativeToEntryAssemblyPath(System.String)
      commentId: M:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.SetCWDRelativeToEntryAssemblyPath(System.String)
      language: CSharp
      name:
        CSharp: SetCWDRelativeToEntryAssemblyPath(String)
        VB: SetCWDRelativeToEntryAssemblyPath(String)
      nameWithType:
        CSharp: ConsoleAppStateManager.SetCWDRelativeToEntryAssemblyPath(String)
        VB: ConsoleAppStateManager.SetCWDRelativeToEntryAssemblyPath(String)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.SetCWDRelativeToEntryAssemblyPath(System.String)
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.SetCWDRelativeToEntryAssemblyPath(System.String)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: SetCWDRelativeToEntryAssemblyPath
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 1007
      summary: "\nSetCWDRelativeToEntryAssemblyPath establishes the CWD relative to\nthe entry assembly path, returning the resulting absolute (fully\nqualified) path.\n"
      example:
      - "\nIf you call <code>SetCWDRelativeToEntryAssemblyPath</code> from an entry\nassembly that loaded from <code>C:\\Users\\Me\\Repositories\\ConsoleAppAids3\\TestStand\\bin\\Release</code>\nand you pass in <code>..\\..\\App_Data</code>, the return value wound be\n<code>C:\\Users\\Me\\Repositories\\ConsoleAppAids3\\TestStand\\App_Data</code>,\nideal for unit test assemblies distributed via GitHub, BitBucket,\nSourceforge, and character-mode assemblies incorporated into Visual\nStudio solutions that are shared amont people whose machine\nconfigurations are not standardized.\n"
      syntax:
        content:
          CSharp: public string SetCWDRelativeToEntryAssemblyPath(string pstrRelativeDirectoryPath)
          VB: Public Function SetCWDRelativeToEntryAssemblyPath(pstrRelativeDirectoryPath As String) As String
        parameters:
        - id: pstrRelativeDirectoryPath
          type: System.String
          description: "\nPath string, expressed relative to the entry assembly location.\n"
        return:
          type: System.String
          description: "\n<p>\nIf it succeeds, the return path is the absolute path that is the new\nCurrent Working Directory.\n</p>\n<p>\nThe returned string is guaranteed to be backslash terminated.\n</p>\n"
      overload: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.SetCWDRelativeToEntryAssemblyPath*
      exceptions:
      - type: System.ArgumentNullException
        commentId: T:System.ArgumentNullException
        description: "\n<p>\nAn ArgumentNullException Exception arises when <code data-dev-comment-type=\"paramref\" class=\"paramref\">pstrRelativeDirectoryPath</code>\nis either a null reference or the empty string.\n</p>\n<p>\nYou must pass a string, even if it is <code>.\\</code> to designate the\nassembly location directory.\n</p>\n"
      - type: System.InvalidOperationException
        commentId: T:System.InvalidOperationException
        description: "\n<p>\nAn InvalidOperationException Exception arises when the directory\npath specified by <code data-dev-comment-type=\"paramref\" class=\"paramref\">pstrRelativeDirectoryPath</code>\ncannot be found with respect to the directory from which the entry\nassembly loaded.\n</p>\n<p>\nThough <code>Environment.CurrentDirectory</code> raises an\n<code>DirectoryNofFoundException</code> Exception if the path resolves to\nan invalid directory, its message omits critical information that\nwould help resolve the cause. Though it might display the resolved\ndirectory name, it would omit the path that was passed into the\nmethod and the name of the directory from which the entry assembly\nloaded.\n</p>\n"
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        System.ArgumentNullException: 
        System.InvalidOperationException: 
  - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
    commentId: T:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
    language: CSharp
    name:
      CSharp: ConsoleAppStateManager.NormalExitAction
      VB: ConsoleAppStateManager.NormalExitAction
    nameWithType:
      CSharp: ConsoleAppStateManager.NormalExitAction
      VB: ConsoleAppStateManager.NormalExitAction
    qualifiedName:
      CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
      VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
    type: Enum
    assemblies:
    - WizardWrx.ConsoleAppAids3
    namespace: WizardWrx.ConsoleAppAids3
    source:
      remote:
        path: ConsoleAppAids3/ConsoleAppStateManager.cs
        branch: master
        repo: https://github.com/txwizard/ConsoleAppAids3.git
      id: NormalExitAction
      path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
      startLine: 187
    summary: "\nThis enumeration governs when the NormalExit method suspends a task\nby calling WaitForCarbonUnit.\n"
    example: []
    syntax:
      content:
        CSharp: public enum NormalExitAction
        VB: Public Enum NormalExitAction
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.ExitImmediately
      commentId: F:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.ExitImmediately
      language: CSharp
      name:
        CSharp: ExitImmediately
        VB: ExitImmediately
      nameWithType:
        CSharp: ConsoleAppStateManager.NormalExitAction.ExitImmediately
        VB: ConsoleAppStateManager.NormalExitAction.ExitImmediately
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.ExitImmediately
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.ExitImmediately
      type: Field
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: ExitImmediately
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 192
      summary: "\nAlways exit immediately, regardless of the status code.\n"
      example: []
      syntax:
        content:
          CSharp: ExitImmediately = 0
          VB: ExitImmediately = 0
        return:
          type: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.HaltOnError
      commentId: F:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.HaltOnError
      language: CSharp
      name:
        CSharp: HaltOnError
        VB: HaltOnError
      nameWithType:
        CSharp: ConsoleAppStateManager.NormalExitAction.HaltOnError
        VB: ConsoleAppStateManager.NormalExitAction.HaltOnError
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.HaltOnError
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.HaltOnError
      type: Field
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: HaltOnError
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 198
      summary: "\nExit immediately if the status code is ERROR_SUCCESS (zero).\nOtherwise, call WaitForCarbonUnit.\n"
      example: []
      syntax:
        content:
          CSharp: HaltOnError = 1
          VB: HaltOnError = 1
        return:
          type: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.Silent
      commentId: F:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.Silent
      language: CSharp
      name:
        CSharp: Silent
        VB: Silent
      nameWithType:
        CSharp: ConsoleAppStateManager.NormalExitAction.Silent
        VB: ConsoleAppStateManager.NormalExitAction.Silent
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.Silent
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.Silent
      type: Field
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Silent
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 203
      summary: "\nExit silently, without displaying any text on the console.\n"
      example: []
      syntax:
        content:
          CSharp: Silent = 2
          VB: Silent = 2
        return:
          type: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.Timed
      commentId: F:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.Timed
      language: CSharp
      name:
        CSharp: Timed
        VB: Timed
      nameWithType:
        CSharp: ConsoleAppStateManager.NormalExitAction.Timed
        VB: ConsoleAppStateManager.NormalExitAction.Timed
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.Timed
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.Timed
      type: Field
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Timed
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 209
      summary: "\nExit after allowing a specified amount of time for an operator\nto read the error message.\n"
      example: []
      syntax:
        content:
          CSharp: Timed = 3
          VB: Timed = 3
        return:
          type: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.WaitForOperator
      commentId: F:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.WaitForOperator
      language: CSharp
      name:
        CSharp: WaitForOperator
        VB: WaitForOperator
      nameWithType:
        CSharp: ConsoleAppStateManager.NormalExitAction.WaitForOperator
        VB: ConsoleAppStateManager.NormalExitAction.WaitForOperator
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.WaitForOperator
        VB: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction.WaitForOperator
      type: Field
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/ConsoleAppStateManager.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: WaitForOperator
        path: ../ConsoleAppAids3/ConsoleAppStateManager.cs
        startLine: 214
      summary: "\nAlways call WaitForCarbonUnit.\n"
      example: []
      syntax:
        content:
          CSharp: WaitForOperator = 4
          VB: WaitForOperator = 4
        return:
          type: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: WizardWrx.ConsoleAppAids3.DisplayAids
    commentId: T:WizardWrx.ConsoleAppAids3.DisplayAids
    language: CSharp
    name:
      CSharp: DisplayAids
      VB: DisplayAids
    nameWithType:
      CSharp: DisplayAids
      VB: DisplayAids
    qualifiedName:
      CSharp: WizardWrx.ConsoleAppAids3.DisplayAids
      VB: WizardWrx.ConsoleAppAids3.DisplayAids
    type: Class
    assemblies:
    - WizardWrx.ConsoleAppAids3
    namespace: WizardWrx.ConsoleAppAids3
    source:
      remote:
        path: ConsoleAppAids3/DisplayAids.CS
        branch: master
        repo: https://github.com/txwizard/ConsoleAppAids3.git
      id: DisplayAids
      path: ../ConsoleAppAids3/DisplayAids.CS
      startLine: 128
    summary: "\nUse the methods of this sealed (implicitly static) class to precisely\ncontrol the way your application handles pauses.\n"
    example: []
    syntax:
      content:
        CSharp: public static class DisplayAids
        VB: Public Module DisplayAids
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: WizardWrx.ConsoleAppAids3.DisplayAids.DESTRUCTIVE_BACKSPACE
      commentId: F:WizardWrx.ConsoleAppAids3.DisplayAids.DESTRUCTIVE_BACKSPACE
      language: CSharp
      name:
        CSharp: DESTRUCTIVE_BACKSPACE
        VB: DESTRUCTIVE_BACKSPACE
      nameWithType:
        CSharp: DisplayAids.DESTRUCTIVE_BACKSPACE
        VB: DisplayAids.DESTRUCTIVE_BACKSPACE
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.DisplayAids.DESTRUCTIVE_BACKSPACE
        VB: WizardWrx.ConsoleAppAids3.DisplayAids.DESTRUCTIVE_BACKSPACE
      type: Field
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/DisplayAids.CS
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: DESTRUCTIVE_BACKSPACE
        path: ../ConsoleAppAids3/DisplayAids.CS
        startLine: 136
      summary: "\nThe destructive backspace took some doing to implement.\n"
      remarks: "\nThis string should probably go into WizardWrx.Common.SpecialStrings.\n"
      example: []
      syntax:
        content:
          CSharp: public const string DESTRUCTIVE_BACKSPACE = "\b \b"
          VB: Public Const DESTRUCTIVE_BACKSPACE As String = vbBack & " " & vbBack
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.ConsoleAppAids3.DisplayAids.FixedConsoleWriterAdapter(System.ConsoleColor,System.ConsoleColor)
      commentId: M:WizardWrx.ConsoleAppAids3.DisplayAids.FixedConsoleWriterAdapter(System.ConsoleColor,System.ConsoleColor)
      language: CSharp
      name:
        CSharp: FixedConsoleWriterAdapter(ConsoleColor, ConsoleColor)
        VB: FixedConsoleWriterAdapter(ConsoleColor, ConsoleColor)
      nameWithType:
        CSharp: DisplayAids.FixedConsoleWriterAdapter(ConsoleColor, ConsoleColor)
        VB: DisplayAids.FixedConsoleWriterAdapter(ConsoleColor, ConsoleColor)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.DisplayAids.FixedConsoleWriterAdapter(System.ConsoleColor, System.ConsoleColor)
        VB: WizardWrx.ConsoleAppAids3.DisplayAids.FixedConsoleWriterAdapter(System.ConsoleColor, System.ConsoleColor)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/DisplayAids.CS
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: FixedConsoleWriterAdapter
        path: ../ConsoleAppAids3/DisplayAids.CS
        startLine: 204
      summary: "\nFilter the FixedConsoleWriter constructor inputs, returning a new\nFixedConsoleWriter that uses the current screen colors if the inputs\nare equal, and one that uses the specified colors if not.\n"
      remarks: "\nThis method ensures that the countdown text is never hidden, without\naltering the behavior of the MessageInColor object through which it\ndisplays text on the console. Specifying the same color code for the\nforeground and background color permits a MessageInColor object to\ndisplay hidden text; which this filter prevents by substituting the\ncurrent console colors when the foreground and background colors are\nthe same.\n\nThough intended for use by the companion method TimedWait, I marked\nthis method public because I feel sure that other applications will\nemerge.\n\nFor the benefit of anyone who want to know whether the author knows\nanything about Design Patterns, although the base class is concrete,\nin all other respects, this is a straightforward Class Factory.\nI was using them long before I knew that anyone had given them a\nname.\n"
      example: []
      syntax:
        content:
          CSharp: public static FixedConsoleWriter FixedConsoleWriterAdapter(ConsoleColor pclrTextColor, ConsoleColor pclrTextBackgroundColor)
          VB: Public Shared Function FixedConsoleWriterAdapter(pclrTextColor As ConsoleColor, pclrTextBackgroundColor As ConsoleColor) As FixedConsoleWriter
        parameters:
        - id: pclrTextColor
          type: System.ConsoleColor
          description: ''
        - id: pclrTextBackgroundColor
          type: System.ConsoleColor
          description: "\nUse a member of the ConsoleColor enumeration to specify a color to\nuse as a background behind the countdown message text.\n"
        return:
          type: WizardWrx.ConsoleAppAids3.FixedConsoleWriter
          description: "\nThis method returns a FixedConsoleWriter object that writes text in\nthe current console colors if both of the specified ConsoleColor\nvalues are the same. Otherwise, it returns a FixedConsoleWriter that\nwrites in the specified colors.\n"
      overload: WizardWrx.ConsoleAppAids3.DisplayAids.FixedConsoleWriterAdapter*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.ConsoleAppAids3.DisplayAids.TimedWait(System.UInt32,System.String,System.ConsoleColor,System.ConsoleColor,WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion)
      commentId: M:WizardWrx.ConsoleAppAids3.DisplayAids.TimedWait(System.UInt32,System.String,System.ConsoleColor,System.ConsoleColor,WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion)
      language: CSharp
      name:
        CSharp: TimedWait(UInt32, String, ConsoleColor, ConsoleColor, DisplayAids.InterruptCriterion)
        VB: TimedWait(UInt32, String, ConsoleColor, ConsoleColor, DisplayAids.InterruptCriterion)
      nameWithType:
        CSharp: DisplayAids.TimedWait(UInt32, String, ConsoleColor, ConsoleColor, DisplayAids.InterruptCriterion)
        VB: DisplayAids.TimedWait(UInt32, String, ConsoleColor, ConsoleColor, DisplayAids.InterruptCriterion)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.DisplayAids.TimedWait(System.UInt32, System.String, System.ConsoleColor, System.ConsoleColor, WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion)
        VB: WizardWrx.ConsoleAppAids3.DisplayAids.TimedWait(System.UInt32, System.String, System.ConsoleColor, System.ConsoleColor, WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/DisplayAids.CS
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: TimedWait
        path: ../ConsoleAppAids3/DisplayAids.CS
        startLine: 249
      summary: "\nFreeze the screen and display a countdown clock for a specified\nnumber of seconds.\n"
      remarks: "\nRather than spawn 4 overloads, there is a single version of this\nmethod, and all arguments have built-in defaults.\n"
      example: []
      syntax:
        content:
          CSharp: public static void TimedWait(uint puintWaitSeconds, string pstrCountdownWaitingFor, ConsoleColor pclrTextColor, ConsoleColor pclrTextBackgroundColor, DisplayAids.InterruptCriterion penmInterruptCriterion)
          VB: Public Shared Sub TimedWait(puintWaitSeconds As UInteger, pstrCountdownWaitingFor As String, pclrTextColor As ConsoleColor, pclrTextBackgroundColor As ConsoleColor, penmInterruptCriterion As DisplayAids.InterruptCriterion)
        parameters:
        - id: puintWaitSeconds
          type: System.UInt32
          description: "\nSpecify the time to wait, in seconds. If this value is zero, a\ndefault value, WAIT_TIME_DEFAULT (currently 30 seconds) is used.\n"
        - id: pstrCountdownWaitingFor
          type: System.String
          description: ''
        - id: pclrTextColor
          type: System.ConsoleColor
          description: ''
        - id: pclrTextBackgroundColor
          type: System.ConsoleColor
          description: "\nUse a member of the ConsoleColor enumeration to specify a color to\nuse as a background behind the countdown message text.\n"
        - id: penmInterruptCriterion
          type: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion
          description: "\nThe WizardWrx.ConsoleAppAids3.DisplayAidsInterruptCriterion\nenumeration specifies options that can be used to control whether,\nand under what conditions, the countdown may be interrupted. The \ndefault value, None, prevents the user stopping the countdown.\n"
      overload: WizardWrx.ConsoleAppAids3.DisplayAids.TimedWait*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.ConsoleAppAids3.DisplayAids.WaitForCarbonUnit
      commentId: M:WizardWrx.ConsoleAppAids3.DisplayAids.WaitForCarbonUnit
      language: CSharp
      name:
        CSharp: WaitForCarbonUnit()
        VB: WaitForCarbonUnit()
      nameWithType:
        CSharp: DisplayAids.WaitForCarbonUnit()
        VB: DisplayAids.WaitForCarbonUnit()
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.DisplayAids.WaitForCarbonUnit()
        VB: WizardWrx.ConsoleAppAids3.DisplayAids.WaitForCarbonUnit()
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/DisplayAids.CS
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: WaitForCarbonUnit
        path: ../ConsoleAppAids3/DisplayAids.CS
        startLine: 509
      summary: "\nDisplay a message, and wait until an operator presses the ENTER\n(Return) key.\n"
      remarks: "\nThis simple overload, which actually came into being second,\ndisplays a default prompt, &quot;Please press the ENTER (Return) key to\nexit the program.&quot;\n\nThe intent of this routine is to ensure that a report or important\nmessage is actually read by a human.\n\nConsequently, this routine is very picky about the responses it\naccepts; only the ENTER key is accepted. To prevent the prompt being\nscrolled off the screen, all input is eaten (not echoed).\n"
      example: []
      syntax:
        content:
          CSharp: public static void WaitForCarbonUnit()
          VB: Public Shared Sub WaitForCarbonUnit
      overload: WizardWrx.ConsoleAppAids3.DisplayAids.WaitForCarbonUnit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.ConsoleAppAids3.DisplayAids.WaitForCarbonUnit(System.String)
      commentId: M:WizardWrx.ConsoleAppAids3.DisplayAids.WaitForCarbonUnit(System.String)
      language: CSharp
      name:
        CSharp: WaitForCarbonUnit(String)
        VB: WaitForCarbonUnit(String)
      nameWithType:
        CSharp: DisplayAids.WaitForCarbonUnit(String)
        VB: DisplayAids.WaitForCarbonUnit(String)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.DisplayAids.WaitForCarbonUnit(System.String)
        VB: WizardWrx.ConsoleAppAids3.DisplayAids.WaitForCarbonUnit(System.String)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/DisplayAids.CS
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: WaitForCarbonUnit
        path: ../ConsoleAppAids3/DisplayAids.CS
        startLine: 547
      summary: "\nDisplay a message, and wait until an operator presses the ENTER\n(Return) key. All cursor motion is suppressed, so that, on exit, the\ncursor is exactly where the Console.Write method that displays the\nprompt left it. Bo this means does this method avoid unexpected\nscreen scrolling.\n"
      remarks: "\nThe intent of this routine is to ensure that a report or important\nmessage stands a better chance of actually being seen and read by a\nhuman.\n\nConsequently, this routine is very picky about the responses it\naccepts; only the ENTER key is accepted. To prevent the prompt being\nscrolled off the screen, all input is eaten (not echoed).\n\nMoreover, you can&apos;t jump the gun. Any characters that accumulate in\nthe keyboard buffer before the prompt is displayed are swallowed\nwhole, with no outward sign that they were eaten. Though I could\ndisplay a message, doing so would, in most cases, be seen as noise\nI might be persuaded to add it to a future version, as an option.\n"
      example: []
      syntax:
        content:
          CSharp: public static void WaitForCarbonUnit(string pstrPrompt)
          VB: Public Shared Sub WaitForCarbonUnit(pstrPrompt As String)
        parameters:
        - id: pstrPrompt
          type: System.String
          description: "\nThis string specifies an alternative message to display. If this is\nan empty string or null reference, a default message, &quot;Please press\nthe ENTER (Return) key to exit the program.&quot; is shown.\n\nIf you want the default message, there is a new overload, which has\nno arguments, that does so, by calling this method, internally, with\na null reference. Having one routine that does the work simplifies\nchanging the behavior of both overloads, should the need arise.\n"
      overload: WizardWrx.ConsoleAppAids3.DisplayAids.WaitForCarbonUnit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.ConsoleAppAids3.DisplayAids.DrainKeyboardBuffer
      commentId: M:WizardWrx.ConsoleAppAids3.DisplayAids.DrainKeyboardBuffer
      language: CSharp
      name:
        CSharp: DrainKeyboardBuffer()
        VB: DrainKeyboardBuffer()
      nameWithType:
        CSharp: DisplayAids.DrainKeyboardBuffer()
        VB: DisplayAids.DrainKeyboardBuffer()
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.DisplayAids.DrainKeyboardBuffer()
        VB: WizardWrx.ConsoleAppAids3.DisplayAids.DrainKeyboardBuffer()
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/DisplayAids.CS
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: DrainKeyboardBuffer
        path: ../ConsoleAppAids3/DisplayAids.CS
        startLine: 592
      summary: "\nDiscard all remaining keys in the console input buffer.\n"
      remarks: "\nThere are several reasons that you might want to do this. The method\nbegan as an internal loop in WaitForCarbonUnit. Then, while testing\nthe library, I realized that I have another routine that needs to do\nthe same thing, which caused me to realize that there might be other\nuses, too.\n"
      example: []
      syntax:
        content:
          CSharp: public static void DrainKeyboardBuffer()
          VB: Public Shared Sub DrainKeyboardBuffer
      overload: WizardWrx.ConsoleAppAids3.DisplayAids.DrainKeyboardBuffer*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion
    commentId: T:WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion
    language: CSharp
    name:
      CSharp: DisplayAids.InterruptCriterion
      VB: DisplayAids.InterruptCriterion
    nameWithType:
      CSharp: DisplayAids.InterruptCriterion
      VB: DisplayAids.InterruptCriterion
    qualifiedName:
      CSharp: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion
      VB: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion
    type: Enum
    assemblies:
    - WizardWrx.ConsoleAppAids3
    namespace: WizardWrx.ConsoleAppAids3
    source:
      remote:
        path: ConsoleAppAids3/DisplayAids.CS
        branch: master
        repo: https://github.com/txwizard/ConsoleAppAids3.git
      id: InterruptCriterion
      path: ../ConsoleAppAids3/DisplayAids.CS
      startLine: 142
    summary: "\nUse this enumeration to specify whether, and under what conditions,\nthe TimedWait method may be interrupted by user inputs.\n"
    example: []
    syntax:
      content:
        CSharp: public enum InterruptCriterion
        VB: Public Enum InterruptCriterion
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion.None
      commentId: F:WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion.None
      language: CSharp
      name:
        CSharp: None
        VB: None
      nameWithType:
        CSharp: DisplayAids.InterruptCriterion.None
        VB: DisplayAids.InterruptCriterion.None
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion.None
        VB: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion.None
      type: Field
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/DisplayAids.CS
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: None
        path: ../ConsoleAppAids3/DisplayAids.CS
        startLine: 147
      summary: "\nThe countdown cannot be stopped.\n"
      example: []
      syntax:
        content:
          CSharp: None = 0
          VB: None = 0
        return:
          type: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion.AnyKey
      commentId: F:WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion.AnyKey
      language: CSharp
      name:
        CSharp: AnyKey
        VB: AnyKey
      nameWithType:
        CSharp: DisplayAids.InterruptCriterion.AnyKey
        VB: DisplayAids.InterruptCriterion.AnyKey
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion.AnyKey
        VB: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion.AnyKey
      type: Field
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/DisplayAids.CS
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: AnyKey
        path: ../ConsoleAppAids3/DisplayAids.CS
        startLine: 152
      summary: "\nPressing any key stops the countdown.\n"
      example: []
      syntax:
        content:
          CSharp: AnyKey = 1
          VB: AnyKey = 1
        return:
          type: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion.CarriageReturn
      commentId: F:WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion.CarriageReturn
      language: CSharp
      name:
        CSharp: CarriageReturn
        VB: CarriageReturn
      nameWithType:
        CSharp: DisplayAids.InterruptCriterion.CarriageReturn
        VB: DisplayAids.InterruptCriterion.CarriageReturn
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion.CarriageReturn
        VB: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion.CarriageReturn
      type: Field
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/DisplayAids.CS
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: CarriageReturn
        path: ../ConsoleAppAids3/DisplayAids.CS
        startLine: 157
      summary: "\nPressing the ENTER key stops the countdown.\n"
      example: []
      syntax:
        content:
          CSharp: CarriageReturn = 2
          VB: CarriageReturn = 2
        return:
          type: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter
    commentId: T:WizardWrx.ConsoleAppAids3.FixedConsoleWriter
    language: CSharp
    name:
      CSharp: FixedConsoleWriter
      VB: FixedConsoleWriter
    nameWithType:
      CSharp: FixedConsoleWriter
      VB: FixedConsoleWriter
    qualifiedName:
      CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter
      VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter
    type: Class
    assemblies:
    - WizardWrx.ConsoleAppAids3
    namespace: WizardWrx.ConsoleAppAids3
    source:
      remote:
        path: ConsoleAppAids3/FixedConsoleWriter.cs
        branch: master
        repo: https://github.com/txwizard/ConsoleAppAids3.git
      id: FixedConsoleWriter
      path: ../ConsoleAppAids3/FixedConsoleWriter.cs
      startLine: 168
    summary: "\nInstances of this class permit a line of a console window to be used\nrepeatedly for successive lines of text, replacing the contents of the\nprevious print statement, so that the lines above it don&apos;t scroll off\nthe screen.  Once instantiated, instances of this class behave almost\nexactly like Console.WriteLine, and you can drop them into your code\nin its place, because its overloads have identical signatures.\n\nPlease see the Remarks.\n"
    remarks: "\nThe magic of this class depends on keeping track of the starting and\ncurrent cursor positions. When a new instance is constructed, the cursor\nposition is stored into a pair of private integers, so that it can be\nused whenever one of its Write methods is about to send text to the\nconsole to determine how far right and/or down the last such operation\nmoved the cursor.\n\nAlthough Console.SetCursorPosition can be used to do so, and is used\ninternally, the point of this class is to relieve you of the burden of\nkeeping track of the cursor.\n\nLet it manage the cursor, so you don&apos;t have to.\n"
    example: []
    syntax:
      content:
        CSharp: public class FixedConsoleWriter
        VB: Public Class FixedConsoleWriter
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.#ctor
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.#ctor
      language: CSharp
      name:
        CSharp: FixedConsoleWriter()
        VB: FixedConsoleWriter()
      nameWithType:
        CSharp: FixedConsoleWriter.FixedConsoleWriter()
        VB: FixedConsoleWriter.FixedConsoleWriter()
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.FixedConsoleWriter()
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.FixedConsoleWriter()
      type: Constructor
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: .ctor
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 231
      summary: "\nConstruct a default instance that uses the current console colors.\n"
      example: []
      syntax:
        content:
          CSharp: public FixedConsoleWriter()
          VB: Public Sub New
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.#ctor(System.ConsoleColor,System.ConsoleColor)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.#ctor(System.ConsoleColor,System.ConsoleColor)
      language: CSharp
      name:
        CSharp: FixedConsoleWriter(ConsoleColor, ConsoleColor)
        VB: FixedConsoleWriter(ConsoleColor, ConsoleColor)
      nameWithType:
        CSharp: FixedConsoleWriter.FixedConsoleWriter(ConsoleColor, ConsoleColor)
        VB: FixedConsoleWriter.FixedConsoleWriter(ConsoleColor, ConsoleColor)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.FixedConsoleWriter(System.ConsoleColor, System.ConsoleColor)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.FixedConsoleWriter(System.ConsoleColor, System.ConsoleColor)
      type: Constructor
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: .ctor
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 252
      summary: "\nConstruct an instance that has color properties that are independent\nof the current console foreground and background colors.\n"
      example: []
      syntax:
        content:
          CSharp: public FixedConsoleWriter(ConsoleColor pclrTextForeColor, ConsoleColor pclrTextBackColor)
          VB: Public Sub New(pclrTextForeColor As ConsoleColor, pclrTextBackColor As ConsoleColor)
        parameters:
        - id: pclrTextForeColor
          type: System.ConsoleColor
          description: "\nSpecify the ConsoleColor property to use as the text (foreground)\ncolor in generated messages.\n"
        - id: pclrTextBackColor
          type: System.ConsoleColor
          description: "\nSpecify the ConsoleColor property to use as the background color in\ngenerated messages.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.#ctor(System.Int32)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: FixedConsoleWriter(Int32)
        VB: FixedConsoleWriter(Int32)
      nameWithType:
        CSharp: FixedConsoleWriter.FixedConsoleWriter(Int32)
        VB: FixedConsoleWriter.FixedConsoleWriter(Int32)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.FixedConsoleWriter(System.Int32)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.FixedConsoleWriter(System.Int32)
      type: Constructor
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: .ctor
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 280
      summary: "\nConstruct an instance that uses the current console colors, and \nwrites text starting at a specified position relative to the left\nedge of the window.\n"
      example:
      - "\nTo start writing at column 9, leaving 8 blanks to the left, pass 8\nas the value of pintOffset.\n"
      syntax:
        content:
          CSharp: public FixedConsoleWriter(int pintOffset)
          VB: Public Sub New(pintOffset As Integer)
        parameters:
        - id: pintOffset
          type: System.Int32
          description: "\nSpecify the position relative to the left edge where writing should\nstart. Columns are counted from zero.\n\nInitializing private properties _intInitialCol and _intLastWriteCol from\nConsole.CursorTop is always deferred until the first time that a Write\nmethod is called, because the correct cursor row is unknown until then.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.#ctor(System.ConsoleColor,System.ConsoleColor,System.Int32)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.#ctor(System.ConsoleColor,System.ConsoleColor,System.Int32)
      language: CSharp
      name:
        CSharp: FixedConsoleWriter(ConsoleColor, ConsoleColor, Int32)
        VB: FixedConsoleWriter(ConsoleColor, ConsoleColor, Int32)
      nameWithType:
        CSharp: FixedConsoleWriter.FixedConsoleWriter(ConsoleColor, ConsoleColor, Int32)
        VB: FixedConsoleWriter.FixedConsoleWriter(ConsoleColor, ConsoleColor, Int32)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.FixedConsoleWriter(System.ConsoleColor, System.ConsoleColor, System.Int32)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.FixedConsoleWriter(System.ConsoleColor, System.ConsoleColor, System.Int32)
      type: Constructor
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: .ctor
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 314
      summary: "\nConstruct an instance that has color properties that are independent\nof the current console foreground and background colors and its left\nmargin set a specified number of columns in from the left margin.\n"
      example:
      - "\nTo start writing at column 9, leaving 8 blanks to the left, pass 8\nas the value of pintOffset.\n"
      syntax:
        content:
          CSharp: public FixedConsoleWriter(ConsoleColor pclrTextForeColor, ConsoleColor pclrTextBackColor, int pintOffset)
          VB: Public Sub New(pclrTextForeColor As ConsoleColor, pclrTextBackColor As ConsoleColor, pintOffset As Integer)
        parameters:
        - id: pclrTextForeColor
          type: System.ConsoleColor
          description: "\nSpecify the ConsoleColor property to use as the text (foreground)\ncolor in generated messages.\n"
        - id: pclrTextBackColor
          type: System.ConsoleColor
          description: "\nSpecify the ConsoleColor property to use as the background color in\ngenerated messages.\n"
        - id: pintOffset
          type: System.Int32
          description: "\nSpecify the position relative to the left edge where writing should\nstart. Columns are counted from zero.\n\nInitializing private properties _intInitialCol and _intLastWriteCol from\nConsole.CursorTop is always deferred until the first time that a Write\nmethod is called, because the correct cursor row is unknown until then.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Boolean)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Boolean)
      language: CSharp
      name:
        CSharp: Write(Boolean)
        VB: Write(Boolean)
      nameWithType:
        CSharp: FixedConsoleWriter.Write(Boolean)
        VB: FixedConsoleWriter.Write(Boolean)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Boolean)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Boolean)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Write
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 334
      summary: "\nWrite the string representation of a bool (Boolean) variable.\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(bool value)
          VB: Public Sub Write(value As Boolean)
        parameters:
        - id: value
          type: System.Boolean
          description: "\nSpecify the Boolean value to display.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Char)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Char)
      language: CSharp
      name:
        CSharp: Write(Char)
        VB: Write(Char)
      nameWithType:
        CSharp: FixedConsoleWriter.Write(Char)
        VB: FixedConsoleWriter.Write(Char)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Char)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Char)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Write
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 349
      summary: "\nWrite the string representation of a char (a Unicode character).\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(char value)
          VB: Public Sub Write(value As Char)
        parameters:
        - id: value
          type: System.Char
          description: "\nSpecify the Unicode character to display.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Char[])
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Char[])
      language: CSharp
      name:
        CSharp: Write(Char[])
        VB: Write(Char())
      nameWithType:
        CSharp: FixedConsoleWriter.Write(Char[])
        VB: FixedConsoleWriter.Write(Char())
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Char[])
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Char())
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Write
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 364
      summary: "\nWrite the string representation of a character array.\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(char[] buffer)
          VB: Public Sub Write(buffer As Char())
        parameters:
        - id: buffer
          type: System.Char[]
          description: "\nSpecify the array of Unicode characters to display.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Decimal)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Decimal)
      language: CSharp
      name:
        CSharp: Write(Decimal)
        VB: Write(Decimal)
      nameWithType:
        CSharp: FixedConsoleWriter.Write(Decimal)
        VB: FixedConsoleWriter.Write(Decimal)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Decimal)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Decimal)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Write
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 379
      summary: "\nWrite the string representation of a decimal variable.\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(decimal value)
          VB: Public Sub Write(value As Decimal)
        parameters:
        - id: value
          type: System.Decimal
          description: "\nSpecify the decimal value to display.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Double)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Double)
      language: CSharp
      name:
        CSharp: Write(Double)
        VB: Write(Double)
      nameWithType:
        CSharp: FixedConsoleWriter.Write(Double)
        VB: FixedConsoleWriter.Write(Double)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Double)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Double)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Write
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 394
      summary: "\nWrite the string representation of a double precision variable.\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(double value)
          VB: Public Sub Write(value As Double)
        parameters:
        - id: value
          type: System.Double
          description: "\nSpecify the double precision value to display.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Single)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Single)
      language: CSharp
      name:
        CSharp: Write(Single)
        VB: Write(Single)
      nameWithType:
        CSharp: FixedConsoleWriter.Write(Single)
        VB: FixedConsoleWriter.Write(Single)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Single)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Single)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Write
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 409
      summary: "\nWrite the string representation of a floating point variable.\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(float value)
          VB: Public Sub Write(value As Single)
        parameters:
        - id: value
          type: System.Single
          description: "\nSpecify the floating point value to display.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Int32)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Int32)
      language: CSharp
      name:
        CSharp: Write(Int32)
        VB: Write(Int32)
      nameWithType:
        CSharp: FixedConsoleWriter.Write(Int32)
        VB: FixedConsoleWriter.Write(Int32)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Int32)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Int32)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Write
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 424
      summary: "\nWrite the string representation of an integer variable.\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(int value)
          VB: Public Sub Write(value As Integer)
        parameters:
        - id: value
          type: System.Int32
          description: "\nSpecify the integer value to display.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Int64)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Int64)
      language: CSharp
      name:
        CSharp: Write(Int64)
        VB: Write(Int64)
      nameWithType:
        CSharp: FixedConsoleWriter.Write(Int64)
        VB: FixedConsoleWriter.Write(Int64)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Int64)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Int64)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Write
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 439
      summary: "\nWrite the string representation of a long integer variable.\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(long value)
          VB: Public Sub Write(value As Long)
        parameters:
        - id: value
          type: System.Int64
          description: "\nSpecify the long integer value to display.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Object)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Object)
      language: CSharp
      name:
        CSharp: Write(Object)
        VB: Write(Object)
      nameWithType:
        CSharp: FixedConsoleWriter.Write(Object)
        VB: FixedConsoleWriter.Write(Object)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Object)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Object)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Write
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 454
      summary: "\nWrite the string representation of a generic Object variable.\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(object value)
          VB: Public Sub Write(value As Object)
        parameters:
        - id: value
          type: System.Object
          description: "\nSpecify the object value to display.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String)
      language: CSharp
      name:
        CSharp: Write(String)
        VB: Write(String)
      nameWithType:
        CSharp: FixedConsoleWriter.Write(String)
        VB: FixedConsoleWriter.Write(String)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Write
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 469
      summary: "\nWrite a string variable.\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(string value)
          VB: Public Sub Write(value As String)
        parameters:
        - id: value
          type: System.String
          description: "\nSpecify the string value to display.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.UInt32)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.UInt32)
      language: CSharp
      name:
        CSharp: Write(UInt32)
        VB: Write(UInt32)
      nameWithType:
        CSharp: FixedConsoleWriter.Write(UInt32)
        VB: FixedConsoleWriter.Write(UInt32)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.UInt32)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.UInt32)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Write
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 485
      summary: "\nWrite the string representation of a uint (unsigned integer)\nvariable.\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(uint value)
          VB: Public Sub Write(value As UInteger)
        parameters:
        - id: value
          type: System.UInt32
          description: "\nSpecify the uint (unsigned integer) value to display.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.UInt64)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.UInt64)
      language: CSharp
      name:
        CSharp: Write(UInt64)
        VB: Write(UInt64)
      nameWithType:
        CSharp: FixedConsoleWriter.Write(UInt64)
        VB: FixedConsoleWriter.Write(UInt64)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.UInt64)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.UInt64)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Write
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 501
      summary: "\nWrite the string representation of a unsigned long integer\nvariable.\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(ulong value)
          VB: Public Sub Write(value As ULong)
        parameters:
        - id: value
          type: System.UInt64
          description: "\nSpecify the unsigned long integer value to display.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String,System.Object)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String,System.Object)
      language: CSharp
      name:
        CSharp: Write(String, Object)
        VB: Write(String, Object)
      nameWithType:
        CSharp: FixedConsoleWriter.Write(String, Object)
        VB: FixedConsoleWriter.Write(String, Object)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String, System.Object)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String, System.Object)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Write
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 522
      summary: "\nWrite a formatted message that includes the string representation of\nan generic object variable.\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(string format, object arg0)
          VB: Public Sub Write(format As String, arg0 As Object)
        parameters:
        - id: format
          type: System.String
          description: "\nUse this string as the message template, which may include at most\none substitution token.\n"
        - id: arg0
          type: System.Object
          description: "\nReplace the substitution token with the string representation of this\ngeneric object.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String,System.Object[])
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String,System.Object[])
      language: CSharp
      name:
        CSharp: Write(String, Object[])
        VB: Write(String, Object())
      nameWithType:
        CSharp: FixedConsoleWriter.Write(String, Object[])
        VB: FixedConsoleWriter.Write(String, Object())
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String, System.Object[])
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String, System.Object())
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Write
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 546
      summary: "\nWrite a formatted message that includes the string representation of\nan generic object variable.\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(string format, params object[] arg)
          VB: Public Sub Write(format As String, ParamArray arg As Object())
        parameters:
        - id: format
          type: System.String
          description: "\nUse this string as the message template, which may contains\nsubstitution tokens for each object in an array of generic Object\nvariables.\n"
        - id: arg
          type: System.Object[]
          description: "\nSubstitute elements from this array of generic Object variables into\nthe format string, replacing tokens with the element whose subscript\nis the number within its brackets.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Char[],System.Int32,System.Int32)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Char[],System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Write(Char[], Int32, Int32)
        VB: Write(Char(), Int32, Int32)
      nameWithType:
        CSharp: FixedConsoleWriter.Write(Char[], Int32, Int32)
        VB: FixedConsoleWriter.Write(Char(), Int32, Int32)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Char[], System.Int32, System.Int32)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.Char(), System.Int32, System.Int32)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Write
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 570
      summary: "\nWrite a formatted message that includes a range of characters taken\nfrom an array of Unicode characters.\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(char[] buffer, int index, int count)
          VB: Public Sub Write(buffer As Char(), index As Integer, count As Integer)
        parameters:
        - id: buffer
          type: System.Char[]
          description: "\nExtract characters from this array of Unicode characters.\n"
        - id: index
          type: System.Int32
          description: "\nSubscript of character to substitute for token {0} in format.\n"
        - id: count
          type: System.Int32
          description: "\nNumber of characters from buffer to substitute into string, which\nmust contain at least count - 1 substitution tokens.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String,System.Object,System.Object)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String,System.Object,System.Object)
      language: CSharp
      name:
        CSharp: Write(String, Object, Object)
        VB: Write(String, Object, Object)
      nameWithType:
        CSharp: FixedConsoleWriter.Write(String, Object, Object)
        VB: FixedConsoleWriter.Write(String, Object, Object)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String, System.Object, System.Object)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String, System.Object, System.Object)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Write
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 597
      summary: "\nWrite a formatted message that includes up to two substitution\ntokens.\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(string format, object arg0, object arg1)
          VB: Public Sub Write(format As String, arg0 As Object, arg1 As Object)
        parameters:
        - id: format
          type: System.String
          description: "\nUse this string as the message template, which may contain up to two\nsubstitution tokens, {0} and {1}.\n"
        - id: arg0
          type: System.Object
          description: "\nThe default string representation of this generic Object variable is\nsubstituted into format for token {0}.\n"
        - id: arg1
          type: System.Object
          description: "\nThe default string representation of this generic Object variable is\nsubstituted into format for token {1}.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String,System.Object,System.Object,System.Object)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String,System.Object,System.Object,System.Object)
      language: CSharp
      name:
        CSharp: Write(String, Object, Object, Object)
        VB: Write(String, Object, Object, Object)
      nameWithType:
        CSharp: FixedConsoleWriter.Write(String, Object, Object, Object)
        VB: FixedConsoleWriter.Write(String, Object, Object, Object)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String, System.Object, System.Object, System.Object)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write(System.String, System.Object, System.Object, System.Object)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: Write
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 628
      summary: "\nWrite a formatted message that includes up to three substitution\ntokens.\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(string format, object arg0, object arg1, object arg2)
          VB: Public Sub Write(format As String, arg0 As Object, arg1 As Object, arg2 As Object)
        parameters:
        - id: format
          type: System.String
          description: "\nUse this string as the message template, which may contain up to 3\nsubstitution tokens, {0}, {1}, and {2}.\n"
        - id: arg0
          type: System.Object
          description: "\nThe default string representation of this generic Object variable is\nsubstituted into format for token {0}.\n"
        - id: arg1
          type: System.Object
          description: "\nThe default string representation of this generic Object variable is\nsubstituted into format for token {1}.\n"
        - id: arg2
          type: System.Object
          description: "\nThe default string representation of this generic Object variable is\nsubstituted into format for token {2}.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ReturnCarriage
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ReturnCarriage
      language: CSharp
      name:
        CSharp: ReturnCarriage()
        VB: ReturnCarriage()
      nameWithType:
        CSharp: FixedConsoleWriter.ReturnCarriage()
        VB: FixedConsoleWriter.ReturnCarriage()
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ReturnCarriage()
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ReturnCarriage()
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: ReturnCarriage
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 646
      summary: "\nCalling this method resets the console writing cursor to the point\nat which it rested when the instance came into being.\n"
      example: []
      syntax:
        content:
          CSharp: public void ReturnCarriage()
          VB: Public Sub ReturnCarriage
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ReturnCarriage*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ReturnCarriage(WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior)
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ReturnCarriage(WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior)
      language: CSharp
      name:
        CSharp: ReturnCarriage(FixedConsoleWriter.CRBehavior)
        VB: ReturnCarriage(FixedConsoleWriter.CRBehavior)
      nameWithType:
        CSharp: FixedConsoleWriter.ReturnCarriage(FixedConsoleWriter.CRBehavior)
        VB: FixedConsoleWriter.ReturnCarriage(FixedConsoleWriter.CRBehavior)
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ReturnCarriage(WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior)
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ReturnCarriage(WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior)
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: ReturnCarriage
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 675
      summary: "\nCalling this method resets the console writing cursor to the point\nspecified by the CRBehavior enumeration member that is passed into\nit. Please see the Remarks.\n"
      remarks: "\nIf the initial cursor position was at the left edge of the console\nwindow, it doesn&apos;t matter which CRBehavior member is specified, and\nyou may as well call the default method that takes no arguments.\n"
      example: []
      syntax:
        content:
          CSharp: public void ReturnCarriage(FixedConsoleWriter.CRBehavior penmCRBehavior)
          VB: Public Sub ReturnCarriage(penmCRBehavior As FixedConsoleWriter.CRBehavior)
        parameters:
        - id: penmCRBehavior
          type: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior
          description: "\nUse this enumeration to control whether the console writing cursor\nis reset to the column where it was when the instance came into\nbeing or to the beginning of that line. Regardless, it is reset to\nthe row where it was when the instance came into being.\n\nIf the integral value of penmCRBehavior doesn&apos;t map to a member of\nthe CRBehavior enumeration, the method behaves as it would if its\nactual value was ReturnToStartingColumn. This prevents overwriting\ntext that you intended to keep.\n\nPlease see the Remarks.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ReturnCarriage*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ScrollUp
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ScrollUp
      language: CSharp
      name:
        CSharp: ScrollUp()
        VB: ScrollUp()
      nameWithType:
        CSharp: FixedConsoleWriter.ScrollUp()
        VB: FixedConsoleWriter.ScrollUp()
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ScrollUp()
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ScrollUp()
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: ScrollUp
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 714
      summary: "\nYou could just as well call Console.Error.WriteLine() directly, but\nplease read the remarks.\n"
      remarks: "\nThe last Write method call leaves the cursor at the end of the text.\nUnless you want your next call to Console.Error.WriteLine() to start\nwriting there, you must call either this method, which, in turn,\ncalls Console.Error.WriteLine(), or call it directly.\n\nIf, instead, you want to overwrite the last message, call the\nReturnCarriage method.\n\nFrom version 7.1 onwards, in addition to scrolling the screen up,\nthis method resets the screen coordinates so that the next call to a\nwrite method begins writing at the then-current location in the\nscreen buffer, preserving any intervening text that was displayed by\ncalling the Console.WriteLine method on either output stream.\n"
      example: []
      syntax:
        content:
          CSharp: public void ScrollUp()
          VB: Public Sub ScrollUp
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ScrollUp*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState
      language: CSharp
      name:
        CSharp: GetStdErrState()
        VB: GetStdErrState()
      nameWithType:
        CSharp: FixedConsoleWriter.GetStdErrState()
        VB: FixedConsoleWriter.GetStdErrState()
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState()
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState()
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: GetStdErrState
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 745
      summary: "\nGets the redirection state of the Standard Error handle.\n"
      remarks: "\nDue to the relatively high cost of obtaining this information, it is\nretrieved to satisfy the first request, and cached in a private\nstatic member, which is returned to satisfy subsequent requests.\n"
      example: []
      syntax:
        content:
          CSharp: public static StandardHandleInfo.StandardHandleState GetStdErrState()
          VB: Public Shared Function GetStdErrState As StandardHandleInfo.StandardHandleState
        return:
          type: WizardWrx.ConsoleStreams.StandardHandleInfo.StandardHandleState
          description: "\nThe return value is the member of the \nStandardHandleInfo.StandardHandleState enumeration that corresponds\nto the state of the handle (either attached or redirected).\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState*
      seealso:
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName: 
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState
      language: CSharp
      name:
        CSharp: GetStdInpState()
        VB: GetStdInpState()
      nameWithType:
        CSharp: FixedConsoleWriter.GetStdInpState()
        VB: FixedConsoleWriter.GetStdInpState()
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState()
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState()
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: GetStdInpState
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 774
      summary: "\nGets the redirection state of the Standard Input handle.\n"
      remarks: "\nDue to the relatively high cost of obtaining this information, it is\nretrieved to satisfy the first request, and cached in a private\nstatic member, which is returned to satisfy subsequent requests.\n"
      example: []
      syntax:
        content:
          CSharp: public static StandardHandleInfo.StandardHandleState GetStdInpState()
          VB: Public Shared Function GetStdInpState As StandardHandleInfo.StandardHandleState
        return:
          type: WizardWrx.ConsoleStreams.StandardHandleInfo.StandardHandleState
          description: "\nThe return value is the member of the \nStandardHandleInfo.StandardHandleState enumeration that corresponds\nto the state of the handle (either attached or redirected).\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState*
      seealso:
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName: 
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState
      language: CSharp
      name:
        CSharp: GetStdOutState()
        VB: GetStdOutState()
      nameWithType:
        CSharp: FixedConsoleWriter.GetStdOutState()
        VB: FixedConsoleWriter.GetStdOutState()
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState()
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState()
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: GetStdOutState
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 803
      summary: "\nGets the redirection state of the Standard Output handle.\n"
      remarks: "\nDue to the relatively high cost of obtaining this information, it is\nretrieved to satisfy the first request, and cached in a private\nstatic member, which is returned to satisfy subsequent requests.\n"
      example: []
      syntax:
        content:
          CSharp: public static StandardHandleInfo.StandardHandleState GetStdOutState()
          VB: Public Shared Function GetStdOutState As StandardHandleInfo.StandardHandleState
        return:
          type: WizardWrx.ConsoleStreams.StandardHandleInfo.StandardHandleState
          description: "\nThe return value is the member of the \nStandardHandleInfo.StandardHandleState enumeration that corresponds\nto the state of the handle (either attached or redirected).\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState*
      seealso:
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName: 
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName
      language: CSharp
      name:
        CSharp: GetStdErrFileName()
        VB: GetStdErrFileName()
      nameWithType:
        CSharp: FixedConsoleWriter.GetStdErrFileName()
        VB: FixedConsoleWriter.GetStdErrFileName()
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName()
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName()
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: GetStdErrFileName
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 844
      summary: "\nGets the absolute (fully qualified) name of the file to which the\nStandard Output console handle is redirected.\n"
      remarks: "\nIf you just need to know whether the handle is redirected, use the\nmuch cheaper static GetStdErrState method.\n\nDue to the behavior of the underlying Win32 API that retrieves the\nname of the file, the returned string begins with &quot;\\\\?\\d:\\&quot;, \nwhere &quot;d&quot; is the letter assigned to the drive on which it resides,\nand is always fully qualified.\n"
      example: []
      syntax:
        content:
          CSharp: public static string GetStdErrFileName()
          VB: Public Shared Function GetStdErrFileName As String
        return:
          type: System.String
          description: "\nIf the Standard Error console handle is redirected, this method\nreturns is absolute (fully qualified) name. Otherwise, it returns\nthe empty string. \n\nPlease see the Remarks section for important information.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName*
      seealso:
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName: 
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName
      language: CSharp
      name:
        CSharp: GetStdInpFileName()
        VB: GetStdInpFileName()
      nameWithType:
        CSharp: FixedConsoleWriter.GetStdInpFileName()
        VB: FixedConsoleWriter.GetStdInpFileName()
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName()
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName()
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: GetStdInpFileName
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 891
      summary: "\nGets the absolute (fully qualified) name of the file to which the\nStandard Input console handle is redirected.\n"
      remarks: "\nIf you just need to know whether the handle is redirected, use the\nstatic GetStdInpState method, which is much cheaper.\n\nDue to the behavior of the underlying Win32 API that retrieves the\nname of the file, the returned string begins with &quot;\\\\?\\d:\\&quot;, \nwhere &quot;d&quot; is the letter assigned to the drive on which it resides,\nand is always fully qualified.\n\nDue to the relatively high cost of obtaining this information, it\nretrieved to satisfy the first request, and cached in a private\nstatic member, which is returned to satisfy subsequent requests.\n"
      example: []
      syntax:
        content:
          CSharp: public static string GetStdInpFileName()
          VB: Public Shared Function GetStdInpFileName As String
        return:
          type: System.String
          description: "\nIf the Standard Input console handle is redirected, this method\nreturns is absolute (fully qualified) name. Otherwise, it returns\nthe empty string. \n\nPlease see the Remarks section for important information.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName*
      seealso:
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName: 
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName
      commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName
      language: CSharp
      name:
        CSharp: GetStdOutFileName()
        VB: GetStdOutFileName()
      nameWithType:
        CSharp: FixedConsoleWriter.GetStdOutFileName()
        VB: FixedConsoleWriter.GetStdOutFileName()
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName()
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName()
      type: Method
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: GetStdOutFileName
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 938
      summary: "\nGets the absolute (fully qualified) name of the file to which the\nStandard Output console handle is redirected.\n"
      remarks: "\nIf you just need to know whether the handle is redirected, use the\nstatic GetStdOutState method, which is much cheaper.\n\nDue to the behavior of the underlying Win32 API that retrieves the\nname of the file, the returned string begins with &quot;\\\\?\\d:\\&quot;, \nwhere &quot;d&quot; is the letter assigned to the drive on which it resides,\nand is always fully qualified.\n\nDue to the relatively high cost of obtaining this information, it\nretrieved to satisfy the first request, and cached in a private\nstatic member, which is returned to satisfy subsequent requests.\n"
      example: []
      syntax:
        content:
          CSharp: public static string GetStdOutFileName()
          VB: Public Shared Function GetStdOutFileName As String
        return:
          type: System.String
          description: "\nIf the Standard Output console handle is redirected, this method\nreturns is absolute (fully qualified) name. Otherwise, it returns\nthe empty string. \n\nPlease see the Remarks section for important information.\n"
      overload: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName*
      seealso:
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName
      - linkId: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName
        commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName: 
        WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName: 
  - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior
    commentId: T:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior
    language: CSharp
    name:
      CSharp: FixedConsoleWriter.CRBehavior
      VB: FixedConsoleWriter.CRBehavior
    nameWithType:
      CSharp: FixedConsoleWriter.CRBehavior
      VB: FixedConsoleWriter.CRBehavior
    qualifiedName:
      CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior
      VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior
    type: Enum
    assemblies:
    - WizardWrx.ConsoleAppAids3
    namespace: WizardWrx.ConsoleAppAids3
    source:
      remote:
        path: ConsoleAppAids3/FixedConsoleWriter.cs
        branch: master
        repo: https://github.com/txwizard/ConsoleAppAids3.git
      id: CRBehavior
      path: ../ConsoleAppAids3/FixedConsoleWriter.cs
      startLine: 175
    summary: "\nUse the members of this enumeration to control the behavior of the\nReturnCarriage method.\n"
    example: []
    syntax:
      content:
        CSharp: public enum CRBehavior
        VB: Public Enum CRBehavior
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior.ReturnToStartingColumn
      commentId: F:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior.ReturnToStartingColumn
      language: CSharp
      name:
        CSharp: ReturnToStartingColumn
        VB: ReturnToStartingColumn
      nameWithType:
        CSharp: FixedConsoleWriter.CRBehavior.ReturnToStartingColumn
        VB: FixedConsoleWriter.CRBehavior.ReturnToStartingColumn
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior.ReturnToStartingColumn
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior.ReturnToStartingColumn
      type: Field
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: ReturnToStartingColumn
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 181
      summary: "\nReturn to the starting column. This is the default behavior if\nthe default form of the ReturnCarriage method is called.\n"
      example: []
      syntax:
        content:
          CSharp: ReturnToStartingColumn = 0
          VB: ReturnToStartingColumn = 0
        return:
          type: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior.ReturnToLefEdge
      commentId: F:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior.ReturnToLefEdge
      language: CSharp
      name:
        CSharp: ReturnToLefEdge
        VB: ReturnToLefEdge
      nameWithType:
        CSharp: FixedConsoleWriter.CRBehavior.ReturnToLefEdge
        VB: FixedConsoleWriter.CRBehavior.ReturnToLefEdge
      qualifiedName:
        CSharp: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior.ReturnToLefEdge
        VB: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior.ReturnToLefEdge
      type: Field
      assemblies:
      - WizardWrx.ConsoleAppAids3
      namespace: WizardWrx.ConsoleAppAids3
      source:
        remote:
          path: ConsoleAppAids3/FixedConsoleWriter.cs
          branch: master
          repo: https://github.com/txwizard/ConsoleAppAids3.git
        id: ReturnToLefEdge
        path: ../ConsoleAppAids3/FixedConsoleWriter.cs
        startLine: 191
      summary: "\nReturn to the left edge, even if the original starting point was\nto the right of it. \n\nUse this setting to overwrite the entire line, including text\nthat was written before the first call to a Write method of this\nclass.\n"
      example: []
      syntax:
        content:
          CSharp: ReturnToLefEdge = 1
          VB: ReturnToLefEdge = 1
        return:
          type: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
references:
  WizardWrx.GenericSingletonBase`1:
    name:
      CSharp:
      - id: WizardWrx.GenericSingletonBase`1
        name: GenericSingletonBase
        nameWithType: GenericSingletonBase
        qualifiedName: WizardWrx.GenericSingletonBase
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: WizardWrx.GenericSingletonBase`1
        name: GenericSingletonBase
        nameWithType: GenericSingletonBase
        qualifiedName: WizardWrx.GenericSingletonBase
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:WizardWrx.GenericSingletonBase`1
  WizardWrx:
    name:
      CSharp:
      - name: WizardWrx
        nameWithType: WizardWrx
        qualifiedName: WizardWrx
        isExternal: true
      VB:
      - name: WizardWrx
        nameWithType: WizardWrx
        qualifiedName: WizardWrx
    isDefinition: true
    commentId: N:WizardWrx
  WizardWrx.GenericSingletonBase{WizardWrx.ConsoleAppAids3.ConsoleAppStateManager}:
    name:
      CSharp:
      - id: WizardWrx.GenericSingletonBase`1
        name: GenericSingletonBase
        nameWithType: GenericSingletonBase
        qualifiedName: WizardWrx.GenericSingletonBase
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager
        name: ConsoleAppStateManager
        nameWithType: ConsoleAppStateManager
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: WizardWrx.GenericSingletonBase`1
        name: GenericSingletonBase
        nameWithType: GenericSingletonBase
        qualifiedName: WizardWrx.GenericSingletonBase
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager
        name: ConsoleAppStateManager
        nameWithType: ConsoleAppStateManager
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: WizardWrx.GenericSingletonBase`1
    parent: WizardWrx
    commentId: T:WizardWrx.GenericSingletonBase{WizardWrx.ConsoleAppAids3.ConsoleAppStateManager}
  WizardWrx.GenericSingletonBase`1.s_genTheOnlyInstance:
    name:
      CSharp:
      - id: WizardWrx.GenericSingletonBase`1.s_genTheOnlyInstance
        name: s_genTheOnlyInstance
        nameWithType: GenericSingletonBase<T>.s_genTheOnlyInstance
        qualifiedName: WizardWrx.GenericSingletonBase<T>.s_genTheOnlyInstance
        isExternal: true
      VB:
      - id: WizardWrx.GenericSingletonBase`1.s_genTheOnlyInstance
        name: s_genTheOnlyInstance
        nameWithType: GenericSingletonBase(Of T).s_genTheOnlyInstance
        qualifiedName: WizardWrx.GenericSingletonBase(Of T).s_genTheOnlyInstance
        isExternal: true
    isDefinition: true
    commentId: F:WizardWrx.GenericSingletonBase`1.s_genTheOnlyInstance
  WizardWrx.GenericSingletonBase{WizardWrx.ConsoleAppAids3.ConsoleAppStateManager}.s_genTheOnlyInstance:
    name:
      CSharp:
      - id: WizardWrx.GenericSingletonBase`1.s_genTheOnlyInstance
        name: s_genTheOnlyInstance
        nameWithType: GenericSingletonBase<ConsoleAppStateManager>.s_genTheOnlyInstance
        qualifiedName: WizardWrx.GenericSingletonBase<WizardWrx.ConsoleAppAids3.ConsoleAppStateManager>.s_genTheOnlyInstance
        isExternal: true
      VB:
      - id: WizardWrx.GenericSingletonBase`1.s_genTheOnlyInstance
        name: s_genTheOnlyInstance
        nameWithType: GenericSingletonBase(Of ConsoleAppStateManager).s_genTheOnlyInstance
        qualifiedName: WizardWrx.GenericSingletonBase(Of WizardWrx.ConsoleAppAids3.ConsoleAppStateManager).s_genTheOnlyInstance
        isExternal: true
    isDefinition: false
    definition: WizardWrx.GenericSingletonBase`1.s_genTheOnlyInstance
    parent: WizardWrx.GenericSingletonBase{WizardWrx.ConsoleAppAids3.ConsoleAppStateManager}
    commentId: F:WizardWrx.GenericSingletonBase{WizardWrx.ConsoleAppAids3.ConsoleAppStateManager}.s_genTheOnlyInstance
  WizardWrx.GenericSingletonBase`1.TheOnlyInstance:
    name:
      CSharp:
      - id: WizardWrx.GenericSingletonBase`1.TheOnlyInstance
        name: TheOnlyInstance
        nameWithType: GenericSingletonBase<T>.TheOnlyInstance
        qualifiedName: WizardWrx.GenericSingletonBase<T>.TheOnlyInstance
        isExternal: true
      VB:
      - id: WizardWrx.GenericSingletonBase`1.TheOnlyInstance
        name: TheOnlyInstance
        nameWithType: GenericSingletonBase(Of T).TheOnlyInstance
        qualifiedName: WizardWrx.GenericSingletonBase(Of T).TheOnlyInstance
        isExternal: true
    isDefinition: true
    commentId: P:WizardWrx.GenericSingletonBase`1.TheOnlyInstance
  WizardWrx.GenericSingletonBase{WizardWrx.ConsoleAppAids3.ConsoleAppStateManager}.TheOnlyInstance:
    name:
      CSharp:
      - id: WizardWrx.GenericSingletonBase`1.TheOnlyInstance
        name: TheOnlyInstance
        nameWithType: GenericSingletonBase<ConsoleAppStateManager>.TheOnlyInstance
        qualifiedName: WizardWrx.GenericSingletonBase<WizardWrx.ConsoleAppAids3.ConsoleAppStateManager>.TheOnlyInstance
        isExternal: true
      VB:
      - id: WizardWrx.GenericSingletonBase`1.TheOnlyInstance
        name: TheOnlyInstance
        nameWithType: GenericSingletonBase(Of ConsoleAppStateManager).TheOnlyInstance
        qualifiedName: WizardWrx.GenericSingletonBase(Of WizardWrx.ConsoleAppAids3.ConsoleAppStateManager).TheOnlyInstance
        isExternal: true
    isDefinition: false
    definition: WizardWrx.GenericSingletonBase`1.TheOnlyInstance
    parent: WizardWrx.GenericSingletonBase{WizardWrx.ConsoleAppAids3.ConsoleAppStateManager}
    commentId: P:WizardWrx.GenericSingletonBase{WizardWrx.ConsoleAppAids3.ConsoleAppStateManager}.TheOnlyInstance
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.UInt32:
    name:
      CSharp:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      VB:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt32
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  WizardWrx.ConsoleAppAids3:
    name:
      CSharp:
      - name: WizardWrx.ConsoleAppAids3
        nameWithType: WizardWrx.ConsoleAppAids3
        qualifiedName: WizardWrx.ConsoleAppAids3
      VB:
      - name: WizardWrx.ConsoleAppAids3
        nameWithType: WizardWrx.ConsoleAppAids3
        qualifiedName: WizardWrx.ConsoleAppAids3
    isDefinition: true
    commentId: N:WizardWrx.ConsoleAppAids3
  WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion
        name: DisplayAids.InterruptCriterion
        nameWithType: DisplayAids.InterruptCriterion
        qualifiedName: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion
      VB:
      - id: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion
        name: DisplayAids.InterruptCriterion
        nameWithType: DisplayAids.InterruptCriterion
        qualifiedName: WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion
    isDefinition: true
    parent: WizardWrx.ConsoleAppAids3
    commentId: T:WizardWrx.ConsoleAppAids3.DisplayAids.InterruptCriterion
  System.ConsoleColor:
    name:
      CSharp:
      - id: System.ConsoleColor
        name: ConsoleColor
        nameWithType: ConsoleColor
        qualifiedName: System.ConsoleColor
        isExternal: true
      VB:
      - id: System.ConsoleColor
        name: ConsoleColor
        nameWithType: ConsoleColor
        qualifiedName: System.ConsoleColor
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ConsoleColor
  WizardWrx.DLLConfigurationManager:
    name:
      CSharp:
      - name: WizardWrx.DLLConfigurationManager
        nameWithType: WizardWrx.DLLConfigurationManager
        qualifiedName: WizardWrx.DLLConfigurationManager
        isExternal: true
      VB:
      - name: WizardWrx.DLLConfigurationManager
        nameWithType: WizardWrx.DLLConfigurationManager
        qualifiedName: WizardWrx.DLLConfigurationManager
    isDefinition: true
    commentId: N:WizardWrx.DLLConfigurationManager
  WizardWrx.DLLConfigurationManager.StateManager:
    name:
      CSharp:
      - id: WizardWrx.DLLConfigurationManager.StateManager
        name: StateManager
        nameWithType: StateManager
        qualifiedName: WizardWrx.DLLConfigurationManager.StateManager
        isExternal: true
      VB:
      - id: WizardWrx.DLLConfigurationManager.StateManager
        name: StateManager
        nameWithType: StateManager
        qualifiedName: WizardWrx.DLLConfigurationManager.StateManager
        isExternal: true
    isDefinition: true
    parent: WizardWrx.DLLConfigurationManager
    commentId: T:WizardWrx.DLLConfigurationManager.StateManager
  WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.BaseStateManager*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.BaseStateManager*
        name: BaseStateManager
        nameWithType: ConsoleAppStateManager.BaseStateManager
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.BaseStateManager
      VB:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.BaseStateManager*
        name: BaseStateManager
        nameWithType: ConsoleAppStateManager.BaseStateManager
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.BaseStateManager
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.BaseStateManager
  WizardWrx.ConsoleAppAids3.ConsoleAppStateManager:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager
        name: ConsoleAppStateManager
        nameWithType: ConsoleAppStateManager
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager
      VB:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager
        name: ConsoleAppStateManager
        nameWithType: ConsoleAppStateManager
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager
    isDefinition: true
    parent: WizardWrx.ConsoleAppAids3
    commentId: T:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager
  WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetTheSingleInstance*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetTheSingleInstance*
        name: GetTheSingleInstance
        nameWithType: ConsoleAppStateManager.GetTheSingleInstance
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetTheSingleInstance
      VB:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetTheSingleInstance*
        name: GetTheSingleInstance
        nameWithType: ConsoleAppStateManager.GetTheSingleInstance
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetTheSingleInstance
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetTheSingleInstance
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  System.String[]:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.LoadBasicErrorMessages*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.LoadBasicErrorMessages*
        name: LoadBasicErrorMessages
        nameWithType: ConsoleAppStateManager.LoadBasicErrorMessages
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.LoadBasicErrorMessages
      VB:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.LoadBasicErrorMessages*
        name: LoadBasicErrorMessages
        nameWithType: ConsoleAppStateManager.LoadBasicErrorMessages
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.LoadBasicErrorMessages
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.LoadBasicErrorMessages
  WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayBOJMessage*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayBOJMessage*
        name: DisplayBOJMessage
        nameWithType: ConsoleAppStateManager.DisplayBOJMessage
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayBOJMessage
      VB:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayBOJMessage*
        name: DisplayBOJMessage
        nameWithType: ConsoleAppStateManager.DisplayBOJMessage
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayBOJMessage
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayBOJMessage
  WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayEOJMessage*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayEOJMessage*
        name: DisplayEOJMessage
        nameWithType: ConsoleAppStateManager.DisplayEOJMessage
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayEOJMessage
      VB:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayEOJMessage*
        name: DisplayEOJMessage
        nameWithType: ConsoleAppStateManager.DisplayEOJMessage
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayEOJMessage
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.DisplayEOJMessage
  WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.ErrorExit*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.ErrorExit*
        name: ErrorExit
        nameWithType: ConsoleAppStateManager.ErrorExit
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.ErrorExit
      VB:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.ErrorExit*
        name: ErrorExit
        nameWithType: ConsoleAppStateManager.ErrorExit
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.ErrorExit
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.ErrorExit
  WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetBOJMessage*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetBOJMessage*
        name: GetBOJMessage
        nameWithType: ConsoleAppStateManager.GetBOJMessage
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetBOJMessage
      VB:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetBOJMessage*
        name: GetBOJMessage
        nameWithType: ConsoleAppStateManager.GetBOJMessage
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetBOJMessage
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetBOJMessage
  WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetEOJMessage*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetEOJMessage*
        name: GetEOJMessage
        nameWithType: ConsoleAppStateManager.GetEOJMessage
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetEOJMessage
      VB:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetEOJMessage*
        name: GetEOJMessage
        nameWithType: ConsoleAppStateManager.GetEOJMessage
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetEOJMessage
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.GetEOJMessage
  WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit*
        name: NormalExit
        nameWithType: ConsoleAppStateManager.NormalExit
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit
      VB:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit*
        name: NormalExit
        nameWithType: ConsoleAppStateManager.NormalExit
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit
  WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
        name: ConsoleAppStateManager.NormalExitAction
        nameWithType: ConsoleAppStateManager.NormalExitAction
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
      VB:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
        name: ConsoleAppStateManager.NormalExitAction
        nameWithType: ConsoleAppStateManager.NormalExitAction
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
    isDefinition: true
    parent: WizardWrx.ConsoleAppAids3
    commentId: T:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExitAction
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  System.ArgumentNullException:
    commentId: T:System.ArgumentNullException
  System.InvalidOperationException:
    commentId: T:System.InvalidOperationException
  WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.SetCWDRelativeToEntryAssemblyPath*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.SetCWDRelativeToEntryAssemblyPath*
        name: SetCWDRelativeToEntryAssemblyPath
        nameWithType: ConsoleAppStateManager.SetCWDRelativeToEntryAssemblyPath
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.SetCWDRelativeToEntryAssemblyPath
      VB:
      - id: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.SetCWDRelativeToEntryAssemblyPath*
        name: SetCWDRelativeToEntryAssemblyPath
        nameWithType: ConsoleAppStateManager.SetCWDRelativeToEntryAssemblyPath
        qualifiedName: WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.SetCWDRelativeToEntryAssemblyPath
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.SetCWDRelativeToEntryAssemblyPath
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter
        name: FixedConsoleWriter
        nameWithType: FixedConsoleWriter
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter
      VB:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter
        name: FixedConsoleWriter
        nameWithType: FixedConsoleWriter
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter
    isDefinition: true
    parent: WizardWrx.ConsoleAppAids3
    commentId: T:WizardWrx.ConsoleAppAids3.FixedConsoleWriter
  WizardWrx.ConsoleAppAids3.DisplayAids.FixedConsoleWriterAdapter*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.DisplayAids.FixedConsoleWriterAdapter*
        name: FixedConsoleWriterAdapter
        nameWithType: DisplayAids.FixedConsoleWriterAdapter
        qualifiedName: WizardWrx.ConsoleAppAids3.DisplayAids.FixedConsoleWriterAdapter
      VB:
      - id: WizardWrx.ConsoleAppAids3.DisplayAids.FixedConsoleWriterAdapter*
        name: FixedConsoleWriterAdapter
        nameWithType: DisplayAids.FixedConsoleWriterAdapter
        qualifiedName: WizardWrx.ConsoleAppAids3.DisplayAids.FixedConsoleWriterAdapter
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.DisplayAids.FixedConsoleWriterAdapter
  WizardWrx.ConsoleAppAids3.DisplayAids.TimedWait*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.DisplayAids.TimedWait*
        name: TimedWait
        nameWithType: DisplayAids.TimedWait
        qualifiedName: WizardWrx.ConsoleAppAids3.DisplayAids.TimedWait
      VB:
      - id: WizardWrx.ConsoleAppAids3.DisplayAids.TimedWait*
        name: TimedWait
        nameWithType: DisplayAids.TimedWait
        qualifiedName: WizardWrx.ConsoleAppAids3.DisplayAids.TimedWait
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.DisplayAids.TimedWait
  WizardWrx.ConsoleAppAids3.DisplayAids.WaitForCarbonUnit*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.DisplayAids.WaitForCarbonUnit*
        name: WaitForCarbonUnit
        nameWithType: DisplayAids.WaitForCarbonUnit
        qualifiedName: WizardWrx.ConsoleAppAids3.DisplayAids.WaitForCarbonUnit
      VB:
      - id: WizardWrx.ConsoleAppAids3.DisplayAids.WaitForCarbonUnit*
        name: WaitForCarbonUnit
        nameWithType: DisplayAids.WaitForCarbonUnit
        qualifiedName: WizardWrx.ConsoleAppAids3.DisplayAids.WaitForCarbonUnit
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.DisplayAids.WaitForCarbonUnit
  WizardWrx.ConsoleAppAids3.DisplayAids.DrainKeyboardBuffer*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.DisplayAids.DrainKeyboardBuffer*
        name: DrainKeyboardBuffer
        nameWithType: DisplayAids.DrainKeyboardBuffer
        qualifiedName: WizardWrx.ConsoleAppAids3.DisplayAids.DrainKeyboardBuffer
      VB:
      - id: WizardWrx.ConsoleAppAids3.DisplayAids.DrainKeyboardBuffer*
        name: DrainKeyboardBuffer
        nameWithType: DisplayAids.DrainKeyboardBuffer
        qualifiedName: WizardWrx.ConsoleAppAids3.DisplayAids.DrainKeyboardBuffer
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.DisplayAids.DrainKeyboardBuffer
  WizardWrx.ConsoleAppAids3.DisplayAids:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.DisplayAids
        name: DisplayAids
        nameWithType: DisplayAids
        qualifiedName: WizardWrx.ConsoleAppAids3.DisplayAids
      VB:
      - id: WizardWrx.ConsoleAppAids3.DisplayAids
        name: DisplayAids
        nameWithType: DisplayAids
        qualifiedName: WizardWrx.ConsoleAppAids3.DisplayAids
    isDefinition: true
    commentId: T:WizardWrx.ConsoleAppAids3.DisplayAids
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter.#ctor*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.#ctor*
        name: FixedConsoleWriter
        nameWithType: FixedConsoleWriter.FixedConsoleWriter
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.FixedConsoleWriter
      VB:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.#ctor*
        name: FixedConsoleWriter
        nameWithType: FixedConsoleWriter.FixedConsoleWriter
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.FixedConsoleWriter
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.#ctor
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
        name: Write
        nameWithType: FixedConsoleWriter.Write
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write
      VB:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write*
        name: Write
        nameWithType: FixedConsoleWriter.Write
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.Write
  System.Char:
    name:
      CSharp:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      VB:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Char
  System.Char[]:
    name:
      CSharp:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Decimal:
    name:
      CSharp:
      - id: System.Decimal
        name: Decimal
        nameWithType: Decimal
        qualifiedName: System.Decimal
        isExternal: true
      VB:
      - id: System.Decimal
        name: Decimal
        nameWithType: Decimal
        qualifiedName: System.Decimal
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Decimal
  System.Double:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Double
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  System.Int64:
    name:
      CSharp:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
      VB:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int64
  System.UInt64:
    name:
      CSharp:
      - id: System.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: System.UInt64
        isExternal: true
      VB:
      - id: System.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: System.UInt64
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt64
  System.Object[]:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ReturnCarriage*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ReturnCarriage*
        name: ReturnCarriage
        nameWithType: FixedConsoleWriter.ReturnCarriage
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ReturnCarriage
      VB:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ReturnCarriage*
        name: ReturnCarriage
        nameWithType: FixedConsoleWriter.ReturnCarriage
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ReturnCarriage
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ReturnCarriage
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior
        name: FixedConsoleWriter.CRBehavior
        nameWithType: FixedConsoleWriter.CRBehavior
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior
      VB:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior
        name: FixedConsoleWriter.CRBehavior
        nameWithType: FixedConsoleWriter.CRBehavior
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior
    isDefinition: true
    parent: WizardWrx.ConsoleAppAids3
    commentId: T:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.CRBehavior
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ScrollUp*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ScrollUp*
        name: ScrollUp
        nameWithType: FixedConsoleWriter.ScrollUp
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ScrollUp
      VB:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ScrollUp*
        name: ScrollUp
        nameWithType: FixedConsoleWriter.ScrollUp
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ScrollUp
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.ScrollUp
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState:
    commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState:
    commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName:
    commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName:
    commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName:
    commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName
  WizardWrx.ConsoleStreams:
    name:
      CSharp:
      - name: WizardWrx.ConsoleStreams
        nameWithType: WizardWrx.ConsoleStreams
        qualifiedName: WizardWrx.ConsoleStreams
        isExternal: true
      VB:
      - name: WizardWrx.ConsoleStreams
        nameWithType: WizardWrx.ConsoleStreams
        qualifiedName: WizardWrx.ConsoleStreams
    isDefinition: true
    commentId: N:WizardWrx.ConsoleStreams
  WizardWrx.ConsoleStreams.StandardHandleInfo.StandardHandleState:
    name:
      CSharp:
      - id: WizardWrx.ConsoleStreams.StandardHandleInfo.StandardHandleState
        name: StandardHandleInfo.StandardHandleState
        nameWithType: StandardHandleInfo.StandardHandleState
        qualifiedName: WizardWrx.ConsoleStreams.StandardHandleInfo.StandardHandleState
        isExternal: true
      VB:
      - id: WizardWrx.ConsoleStreams.StandardHandleInfo.StandardHandleState
        name: StandardHandleInfo.StandardHandleState
        nameWithType: StandardHandleInfo.StandardHandleState
        qualifiedName: WizardWrx.ConsoleStreams.StandardHandleInfo.StandardHandleState
        isExternal: true
    isDefinition: true
    parent: WizardWrx.ConsoleStreams
    commentId: T:WizardWrx.ConsoleStreams.StandardHandleInfo.StandardHandleState
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState*
        name: GetStdErrState
        nameWithType: FixedConsoleWriter.GetStdErrState
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState
      VB:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState*
        name: GetStdErrState
        nameWithType: FixedConsoleWriter.GetStdErrState
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState:
    commentId: M:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrState
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState*
        name: GetStdInpState
        nameWithType: FixedConsoleWriter.GetStdInpState
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState
      VB:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState*
        name: GetStdInpState
        nameWithType: FixedConsoleWriter.GetStdInpState
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpState
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState*
        name: GetStdOutState
        nameWithType: FixedConsoleWriter.GetStdOutState
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState
      VB:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState*
        name: GetStdOutState
        nameWithType: FixedConsoleWriter.GetStdOutState
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutState
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName*
        name: GetStdErrFileName
        nameWithType: FixedConsoleWriter.GetStdErrFileName
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName
      VB:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName*
        name: GetStdErrFileName
        nameWithType: FixedConsoleWriter.GetStdErrFileName
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdErrFileName
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName*
        name: GetStdInpFileName
        nameWithType: FixedConsoleWriter.GetStdInpFileName
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName
      VB:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName*
        name: GetStdInpFileName
        nameWithType: FixedConsoleWriter.GetStdInpFileName
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdInpFileName
  WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName*:
    name:
      CSharp:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName*
        name: GetStdOutFileName
        nameWithType: FixedConsoleWriter.GetStdOutFileName
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName
      VB:
      - id: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName*
        name: GetStdOutFileName
        nameWithType: FixedConsoleWriter.GetStdOutFileName
        qualifiedName: WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName
    isDefinition: true
    commentId: Overload:WizardWrx.ConsoleAppAids3.FixedConsoleWriter.GetStdOutFileName
