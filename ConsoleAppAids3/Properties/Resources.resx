<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CONSOLE_APP_BOJ" xml:space="preserve">
    <value>{0}{1}Begin @ {2} ({3} UTC){1}</value>
    <comment>Template for startup mssage to display on console</comment>
  </data>
  <data name="CONSOLE_APP_BOJ_NO_UTC" xml:space="preserve">
    <value>{0}{1}Begin @ {2}{1}</value>
    <comment>Template for startup mssage to display on console</comment>
  </data>
  <data name="CONSOLE_APP_EOJ" xml:space="preserve">
    <value>{0}{1} End - {2} ({3} UTC){0}Elapsed time: {4}</value>
    <comment>Template for shutdown mssage to display on console WITH UTC time</comment>
  </data>
  <data name="CONSOLE_APP_EOJ_NO_UTC" xml:space="preserve">
    <value>{0}{1} End - {2}{0}Elapsed time: {3}</value>
    <comment>Template for shutdown mssage to display on console WITHOUT UTC time</comment>
  </data>
  <data name="CONSOLE_APP_EOJ_REPLACEMENT_TOKEN" xml:space="preserve">
    <value> End{0}</value>
  </data>
  <data name="CONSOLE_APP_EOJ_SPLIT_TOKEN" xml:space="preserve">
    <value> End - </value>
  </data>
  <data name="CONSOLE_APP_EXIT_CODE" xml:space="preserve">
    <value>{1}    Exit code = {0}{1}{1}</value>
  </data>
  <data name="ERRMSG_EXCEPTION_BARE_BONES" xml:space="preserve">
    <value>{0}:An {1} exception occurred in routine {2}.{8}                         Message            = {3}{8}                         Console.CursorLeft = {4}{8}                         Console.CursorTop  = {5}{8}                         _intInitialCol     = {6}{8}                         _intInitialRow     = {7}</value>
    <comment>The FixedConsoleWriter constructs a detailed report about its internal state when an I/O error occurs when it attempts to move the cursor when the standard output stream is redirected to a file.</comment>
  </data>
  <data name="ERRMSG_UNKNOWN_EXIT_CODE" xml:space="preserve">
    <value>Internal error: Unknown status code, {0}</value>
    <comment>This message is displayed when the specified exit code exceeds the highest value for which the message table contains an entry.</comment>
  </data>
  <data name="MSG_CARBON_UNIT_DEFAULT" xml:space="preserve">
    <value>Please press the ENTER (Return) key to exit the program.</value>
    <comment>WaitForCarbonUnit uses this as its default message. This resource string replaces a static constant, and opens the way to localization.</comment>
  </data>
  <data name="MSG_INTERRUPTCRITERION_ANYKEY" xml:space="preserve">
    <value>Press any key to stop the countdown.</value>
    <comment>The TimedWait methods of the DisplayAids class display this message to inform the user how to abport the wait.</comment>
  </data>
  <data name="MSG_INTERRUPTCRITERION_CARRIAGERETURN" xml:space="preserve">
    <value>Press the ENTER key to stop the countdown.</value>
    <comment>The TimedWait methods of the DisplayAids class display this message to inform the user how to abport the wait.</comment>
  </data>
  <data name="MSG_INTERRUPTCRITERION_NONE" xml:space="preserve">
    <value>The countdown cannot be stopped.</value>
    <comment>The TimedWait methods of the DisplayAids class display this message to inform the user how to abport the wait.</comment>
  </data>
  <data name="NORMAL_EXIT_INTERNAL_ERROR" xml:space="preserve">
    <value>{2}INTERNAL ERROR in routine WizardWrx.ConsoleAppAids3.ConsoleAppStateManager.NormalExit:{2}    Value given as argument penmNormalExitAction  = {0}{2}    Override substituted for above argument value = {1}{2}</value>
    <comment>This message is used by the NormalExit method of the ConsoleAppStateManager class to report an invalid argument.</comment>
  </data>
  <data name="TIMEDWAIT_COUNTDOWN_MSG_TPL" xml:space="preserve">
    <value>{0} in {1} seconds.</value>
    <comment>TimedWait: default program ending message</comment>
  </data>
  <data name="TIMEDWAIT_COUNTDOWN_WAITING_FOR" xml:space="preserve">
    <value>Program ending</value>
    <comment>TimedWait: default countdown progress message</comment>
  </data>
  <data name="TIMEDWAIT_DONE_EARLY_MSG_TPL" xml:space="preserve">
    <value>{0} NOW, after pausing for {1} of {2} programmed seconds.</value>
    <comment>TimedWait: early countdown exit message</comment>
  </data>
  <data name="TIMEDWAIT_DONE_MSG_TPL" xml:space="preserve">
    <value>{0} NOW.</value>
    <comment>TimedWait: default countdown zero message</comment>
  </data>
</root>